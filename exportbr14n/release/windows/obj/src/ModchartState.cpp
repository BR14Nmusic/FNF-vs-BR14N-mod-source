// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_b51bf83fd355e1db
#define INCLUDED_b51bf83fd355e1db
#include "hxcpp.h"
#endif
#ifndef INCLUDED_cc9afe4755847ade
#define INCLUDED_cc9afe4755847ade
#include "linc_lua.h"
#endif
#ifndef INCLUDED_Boyfriend
#include <Boyfriend.h>
#endif
#ifndef INCLUDED_Character
#include <Character.h>
#endif
#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_LoadingState
#include <LoadingState.h>
#endif
#ifndef INCLUDED_MainMenuState
#include <MainMenuState.h>
#endif
#ifndef INCLUDED_ModchartState
#include <ModchartState.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Note
#include <Note.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_llua_Convert
#include <llua/Convert.h>
#endif
#ifndef INCLUDED_llua_Lua_helper
#include <llua/Lua_helper.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_308_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",308,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_311_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",311,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_317_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",317,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_321_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",321,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_324_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",324,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_330_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",330,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_334_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",334,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_338_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",338,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_342_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",342,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_348_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",348,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_352_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",352,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_356_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",356,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_360_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",360,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_364_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",364,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_368_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",368,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_373_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",373,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_377_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",377,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_381_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",381,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_384_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",384,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_391_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",391,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_395_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",395,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_399_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",399,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_403_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",403,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_413_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",413,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_418_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",418,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_423_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",423,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_429_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",429,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_433_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",433,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_439_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",439,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_443_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",443,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_447_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",447,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_451_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",451,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_455_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",455,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_460_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",460,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_464_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",464,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_468_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",468,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_472_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",472,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_476_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",476,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_480_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",480,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_239_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",239,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_297_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",297,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_487_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",487,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_491_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",491,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_495_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",495,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_499_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",499,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_503_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",503,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_507_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",507,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_511_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",511,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_515_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",515,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_519_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",519,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_523_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",523,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_527_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",527,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_531_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",531,0x8167c869)
HX_LOCAL_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_27_callLua,"ModchartState","callLua",0xd99f3fc1,"ModchartState.callLua","ModchartState.hx",27,0x8167c869)
HX_LOCAL_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_60_getType,"ModchartState","getType",0xa4dc3277,"ModchartState.getType","ModchartState.hx",60,0x8167c869)
HX_LOCAL_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_69_getReturnValues,"ModchartState","getReturnValues",0x8bf2856f,"ModchartState.getReturnValues","ModchartState.hx",69,0x8167c869)
HX_LOCAL_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_82_convert,"ModchartState","convert",0xa01a8dfa,"ModchartState.convert","ModchartState.hx",82,0x8167c869)
HX_LOCAL_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_125_getLuaErrorMessage,"ModchartState","getLuaErrorMessage",0x5dfc841a,"ModchartState.getLuaErrorMessage","ModchartState.hx",125,0x8167c869)
HX_LOCAL_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_131_setVar,"ModchartState","setVar",0x1c3cfa3e,"ModchartState.setVar","ModchartState.hx",131,0x8167c869)
HX_LOCAL_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_138_getVar,"ModchartState","getVar",0x4ff4a5ca,"ModchartState.getVar","ModchartState.hx",138,0x8167c869)
HX_LOCAL_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_157_getActorByName,"ModchartState","getActorByName",0x97a8727a,"ModchartState.getActorByName","ModchartState.hx",157,0x8167c869)
HX_LOCAL_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_182_makeLuaSprite,"ModchartState","makeLuaSprite",0x6b8e8b56,"ModchartState.makeLuaSprite","ModchartState.hx",182,0x8167c869)
HX_LOCAL_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_231_die,"ModchartState","die",0xb9647dc7,"ModchartState.die","ModchartState.hx",231,0x8167c869)
HX_LOCAL_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_596_executeState,"ModchartState","executeState",0xa7b6b235,"ModchartState.executeState","ModchartState.hx",596,0x8167c869)
HX_LOCAL_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_601_createModchartState,"ModchartState","createModchartState",0x9084fb80,"ModchartState.createModchartState","ModchartState.hx",601,0x8167c869)
HX_LOCAL_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_24_boot,"ModchartState","boot",0x7d3bb9cb,"ModchartState.boot","ModchartState.hx",24,0x8167c869)
HX_LOCAL_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_177_boot,"ModchartState","boot",0x7d3bb9cb,"ModchartState.boot","ModchartState.hx",177,0x8167c869)

void ModchartState_obj::__construct(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            		void _hx_run(Float x){
            			HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_308_new)
HXLINE( 308)			::PlayState_obj::instance->camHUD->set_angle(x);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(2)
            		void _hx_run(int x,int y){
            			HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_311_new)
HXLINE( 312)			::PlayState_obj::instance->camHUD->set_x(( (Float)(x) ));
HXLINE( 313)			::PlayState_obj::instance->camHUD->set_y(( (Float)(y) ));
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_3) HXARGC(0)
            		Float _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_317_new)
HXLINE( 317)			return ::PlayState_obj::instance->camHUD->x;
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_4) HXARGC(0)
            		Float _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_321_new)
HXLINE( 321)			return ::PlayState_obj::instance->camHUD->y;
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_5) HXARGC(2)
            		void _hx_run(int x,int y){
            			HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_324_new)
HXLINE( 325)			::flixel::FlxG_obj::camera->set_x(( (Float)(x) ));
HXLINE( 326)			::flixel::FlxG_obj::camera->set_y(( (Float)(y) ));
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_6) HXARGC(0)
            		Float _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_330_new)
HXLINE( 330)			return ::flixel::FlxG_obj::camera->x;
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_7) HXARGC(0)
            		Float _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_334_new)
HXLINE( 334)			return ::flixel::FlxG_obj::camera->y;
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_8) HXARGC(1)
            		void _hx_run(int zoomAmount){
            			HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_338_new)
HXLINE( 338)			::flixel::FlxG_obj::camera->set_zoom(( (Float)(zoomAmount) ));
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_9) HXARGC(1)
            		void _hx_run(int zoomAmount){
            			HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_342_new)
HXLINE( 342)			::PlayState_obj::instance->camHUD->set_zoom(( (Float)(zoomAmount) ));
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_10) HXARGC(0)
            		int _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_348_new)
HXLINE( 348)			return ::PlayState_obj::instance->notes->length;
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_11) HXARGC(1)
            		Float _hx_run(int id){
            			HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_352_new)
HXLINE( 352)			return Dynamic( ::PlayState_obj::instance->notes->members->__get(id)).StaticCast<  ::Note >()->x;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_12) HXARGC(1)
            		Float _hx_run(int id){
            			HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_356_new)
HXLINE( 356)			return Dynamic( ::PlayState_obj::instance->notes->members->__get(id)).StaticCast<  ::Note >()->y;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_13) HXARGC(1)
            		int _hx_run(int id){
            			HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_360_new)
HXLINE( 360)			return Dynamic( ::PlayState_obj::instance->notes->members->__get(id)).StaticCast<  ::Note >()->noteData;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_14) HXARGC(1)
            		bool _hx_run(int id){
            			HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_364_new)
HXLINE( 364)			return Dynamic( ::PlayState_obj::instance->notes->members->__get(id)).StaticCast<  ::Note >()->isSustainNote;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_15) HXARGC(1)
            		bool _hx_run(int id){
            			HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_368_new)
HXLINE( 368)			return Dynamic( ::PlayState_obj::instance->notes->members->__get(id)).StaticCast<  ::Note >()->prevNote->isSustainNote;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_16) HXARGC(1)
            		Float _hx_run(int id){
            			HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_373_new)
HXLINE( 373)			return Dynamic( ::PlayState_obj::instance->notes->members->__get(id)).StaticCast<  ::Note >()->prevNote->x;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_17) HXARGC(1)
            		Float _hx_run(int id){
            			HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_377_new)
HXLINE( 377)			return Dynamic( ::PlayState_obj::instance->notes->members->__get(id)).StaticCast<  ::Note >()->prevNote->y;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_18) HXARGC(1)
            		bool _hx_run(int id){
            			HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_381_new)
HXLINE( 381)			return Dynamic( ::PlayState_obj::instance->notes->members->__get(id)).StaticCast<  ::Note >()->mustPress;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_19) HXARGC(1)
            		Float _hx_run(int id){
            			HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_384_new)
HXLINE( 385)			if (Dynamic( ::PlayState_obj::instance->notes->members->__get(id)).StaticCast<  ::Note >()->mustPress) {
HXLINE( 386)				return Dynamic( ::PlayState_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(Dynamic( ::PlayState_obj::instance->notes->members->__get(id)).StaticCast<  ::Note >()->noteData) ))))).StaticCast<  ::flixel::FlxSprite >()->x;
            			}
HXLINE( 387)			return Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(Dynamic( ::PlayState_obj::instance->notes->members->__get(id)).StaticCast<  ::Note >()->noteData) ))))).StaticCast<  ::flixel::FlxSprite >()->x;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_20) HXARGC(0)
            		bool _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_391_new)
HXLINE( 391)			return (::PlayState_obj::instance->notes->members->get_length() != 0);
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_21) HXARGC(1)
            		Float _hx_run(int id){
            			HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_395_new)
HXLINE( 395)			return Dynamic( ::PlayState_obj::instance->notes->members->__get(id)).StaticCast<  ::Note >()->strumTime;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_22) HXARGC(1)
            		Float _hx_run(int id){
            			HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_399_new)
HXLINE( 399)			return Dynamic( ::PlayState_obj::instance->notes->members->__get(id)).StaticCast<  ::Note >()->scale->x;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_23) HXARGC(3)
            		void _hx_run(Float x,Float y,int id){
            			HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_403_new)
HXLINE( 403)			if (::hx::IsNull( Dynamic( ::PlayState_obj::instance->notes->members->__get(id)).StaticCast<  ::Note >() )) {
HXLINE( 404)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown((HX_("error! you cannot set a rendered notes position when it doesnt exist! ID: ",44,12,ff,64) + id)));
            			}
            			else {
HXLINE( 407)				Dynamic( ::PlayState_obj::instance->notes->members->__get(id)).StaticCast<  ::Note >()->modifiedByLua = true;
HXLINE( 408)				Dynamic( ::PlayState_obj::instance->notes->members->__get(id)).StaticCast<  ::Note >()->set_x(x);
HXLINE( 409)				Dynamic( ::PlayState_obj::instance->notes->members->__get(id)).StaticCast<  ::Note >()->set_y(y);
            			}
            		}
            		HX_END_LOCAL_FUNC3((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_24) HXARGC(2)
            		void _hx_run(Float alpha,int id){
            			HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_413_new)
HXLINE( 414)			Dynamic( ::PlayState_obj::instance->notes->members->__get(id)).StaticCast<  ::Note >()->modifiedByLua = true;
HXLINE( 415)			Dynamic( ::PlayState_obj::instance->notes->members->__get(id)).StaticCast<  ::Note >()->set_alpha(alpha);
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_25) HXARGC(2)
            		void _hx_run(Float scale,int id){
            			HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_418_new)
HXLINE( 419)			Dynamic( ::PlayState_obj::instance->notes->members->__get(id)).StaticCast<  ::Note >()->modifiedByLua = true;
HXLINE( 420)			 ::Note _hx_tmp = Dynamic( ::PlayState_obj::instance->notes->members->__get(id)).StaticCast<  ::Note >();
HXDLIN( 420)			_hx_tmp->setGraphicSize(::Std_obj::_hx_int((Dynamic( ::PlayState_obj::instance->notes->members->__get(id)).StaticCast<  ::Note >()->get_width() * scale)),null());
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_26) HXARGC(3)
            		void _hx_run(int scaleX,int scaleY,int id){
            			HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_423_new)
HXLINE( 424)			Dynamic( ::PlayState_obj::instance->notes->members->__get(id)).StaticCast<  ::Note >()->modifiedByLua = true;
HXLINE( 425)			Dynamic( ::PlayState_obj::instance->notes->members->__get(id)).StaticCast<  ::Note >()->setGraphicSize(scaleX,scaleY);
            		}
            		HX_END_LOCAL_FUNC3((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_27) HXARGC(1)
            		Float _hx_run(int id){
            			HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_429_new)
HXLINE( 429)			return Dynamic( ::PlayState_obj::instance->notes->members->__get(id)).StaticCast<  ::Note >()->get_width();
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_28) HXARGC(2)
            		void _hx_run(Float angle,int id){
            			HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_433_new)
HXLINE( 434)			Dynamic( ::PlayState_obj::instance->notes->members->__get(id)).StaticCast<  ::Note >()->modifiedByLua = true;
HXLINE( 435)			Dynamic( ::PlayState_obj::instance->notes->members->__get(id)).StaticCast<  ::Note >()->set_angle(angle);
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_29, ::ModchartState,_gthis) HXARGC(2)
            		void _hx_run(int x,::String id){
            			HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_439_new)
HXLINE( 439)			_gthis->getActorByName(id)->__SetField(HX_("x",78,00,00,00),x,::hx::paccDynamic);
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_30, ::ModchartState,_gthis) HXARGC(2)
            		void _hx_run(Float alpha,::String id){
            			HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_443_new)
HXLINE( 443)			_gthis->getActorByName(id)->__SetField(HX_("alpha",5e,a7,96,21),alpha,::hx::paccDynamic);
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_31, ::ModchartState,_gthis) HXARGC(2)
            		void _hx_run(int y,::String id){
            			HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_447_new)
HXLINE( 447)			_gthis->getActorByName(id)->__SetField(HX_("y",79,00,00,00),y,::hx::paccDynamic);
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_32, ::ModchartState,_gthis) HXARGC(2)
            		void _hx_run(int angle,::String id){
            			HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_451_new)
HXLINE( 451)			_gthis->getActorByName(id)->__SetField(HX_("angle",d3,43,e2,22),angle,::hx::paccDynamic);
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_33, ::ModchartState,_gthis) HXARGC(2)
            		void _hx_run(Float scale,::String id){
            			HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_455_new)
HXLINE( 455)			 ::Dynamic _hx_tmp =  ::Dynamic(_gthis->getActorByName(id)->__Field(HX_("setGraphicSize",07,d7,f8,2d),::hx::paccDynamic));
HXDLIN( 455)			_hx_tmp(::Std_obj::_hx_int((( (Float)(_gthis->getActorByName(id)->__Field(HX_("width",06,b6,62,ca),::hx::paccDynamic)) ) * scale)));
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_34, ::ModchartState,_gthis) HXARGC(1)
            		 ::Dynamic _hx_run(::String id){
            			HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_460_new)
HXLINE( 460)			return  ::Dynamic(_gthis->getActorByName(id)->__Field(HX_("width",06,b6,62,ca),::hx::paccDynamic));
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_35, ::ModchartState,_gthis) HXARGC(1)
            		 ::Dynamic _hx_run(::String id){
            			HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_464_new)
HXLINE( 464)			return  ::Dynamic(_gthis->getActorByName(id)->__Field(HX_("height",e7,07,4c,02),::hx::paccDynamic));
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_36, ::ModchartState,_gthis) HXARGC(1)
            		 ::Dynamic _hx_run(::String id){
            			HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_468_new)
HXLINE( 468)			return  ::Dynamic(_gthis->getActorByName(id)->__Field(HX_("alpha",5e,a7,96,21),::hx::paccDynamic));
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_37, ::ModchartState,_gthis) HXARGC(1)
            		 ::Dynamic _hx_run(::String id){
            			HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_472_new)
HXLINE( 472)			return  ::Dynamic(_gthis->getActorByName(id)->__Field(HX_("angle",d3,43,e2,22),::hx::paccDynamic));
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_38, ::ModchartState,_gthis) HXARGC(1)
            		 ::Dynamic _hx_run(::String id){
            			HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_476_new)
HXLINE( 476)			return  ::Dynamic(_gthis->getActorByName(id)->__Field(HX_("x",78,00,00,00),::hx::paccDynamic));
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_39, ::ModchartState,_gthis) HXARGC(1)
            		 ::Dynamic _hx_run(::String id){
            			HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_480_new)
HXLINE( 480)			return  ::Dynamic(_gthis->getActorByName(id)->__Field(HX_("y",79,00,00,00),::hx::paccDynamic));
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_239_new)
HXLINE( 238)		 ::ModchartState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 240)		::haxe::Log_obj::trace(HX_("opening a lua state (because we are cool :))",5d,94,d7,80),::hx::SourceInfo(HX_("source_brian/ModchartState.hx",36,d4,94,59),240,HX_("ModchartState",75,11,f2,8b),HX_("new",60,d0,53,00)));
HXLINE( 241)		::ModchartState_obj::lua = luaL_newstate();
HXLINE( 242)		luaL_openlibs(::ModchartState_obj::lua);
HXLINE( 243)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 243)		::String _hx_tmp1 = (HX_("Lua version: ",36,0b,c4,a9) + linc::lua::version());
HXDLIN( 243)		_hx_tmp(_hx_tmp1,::hx::SourceInfo(HX_("source_brian/ModchartState.hx",36,d4,94,59),243,HX_("ModchartState",75,11,f2,8b),HX_("new",60,d0,53,00)));
HXLINE( 244)		 ::Dynamic _hx_tmp2 = ::haxe::Log_obj::trace;
HXDLIN( 244)		::String _hx_tmp3 = (HX_("LuaJIT version: ",fb,95,09,43) + linc::lua::versionJIT());
HXDLIN( 244)		_hx_tmp2(_hx_tmp3,::hx::SourceInfo(HX_("source_brian/ModchartState.hx",36,d4,94,59),244,HX_("ModchartState",75,11,f2,8b),HX_("new",60,d0,53,00)));
HXLINE( 245)		{
HXLINE( 245)			 cpp::Reference<lua_State> l = ::ModchartState_obj::lua;
HXDLIN( 245)			linc::callbacks::set_callbacks_function(::cpp::Function< int ( cpp::Reference<lua_State>,::String)>(::hx::AnyCast(&::llua::Lua_helper_obj::callback_handler )));
            		}
HXLINE( 247)		 cpp::Reference<lua_State> result = ::ModchartState_obj::lua;
HXDLIN( 247)		::String library = null();
HXDLIN( 247)		int result1 = luaL_dofile(result,::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + (( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() + HX_("/modchart",0b,0e,ff,5d))) + HX_(".lua",4a,2a,ba,1e)),HX_("TEXT",ad,94,ba,37),library));
HXLINE( 249)		if ((result1 != 0)) {
HXLINE( 251)			 ::lime::ui::Window _hx_tmp = ::lime::app::Application_obj::current->_hx___window;
HXDLIN( 251)			_hx_tmp->alert((HX_("LUA COMPILE ERROR:\n",e3,81,d3,99) + linc::lua::tostring(::ModchartState_obj::lua,result1)),HX_("Kade Engine Modcharts",c2,0f,cb,ec));
HXLINE( 252)			::ModchartState_obj::lua = null();
HXLINE( 253)			{
HXLINE( 253)				 ::flixel::FlxState nextState = ::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::MainMenuState_obj::__alloc( HX_CTX ,null(),null())) ),false);
HXDLIN( 253)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 253)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
            		}
HXLINE( 258)		this->setVar(HX_("difficulty",3b,4e,8e,47),::PlayState_obj::storyDifficulty);
HXLINE( 259)		this->setVar(HX_("bpm",df,be,4a,00),::Conductor_obj::bpm);
HXLINE( 260)		 ::Dynamic _hx_tmp4;
HXDLIN( 260)		if (::hx::IsNotEq( ::flixel::FlxG_obj::save->data->__Field(HX_("scrollSpeed",3a,e0,46,cb),::hx::paccDynamic),1 )) {
HXLINE( 260)			_hx_tmp4 =  ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("scrollSpeed",3a,e0,46,cb),::hx::paccDynamic));
            		}
            		else {
HXLINE( 260)			_hx_tmp4 =  ::Dynamic(::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic));
            		}
HXDLIN( 260)		this->setVar(HX_("scrollspeed",5a,70,19,38),_hx_tmp4);
HXLINE( 261)		this->setVar(HX_("fpsCap",a9,7b,7e,91), ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("fpsCap",a9,7b,7e,91),::hx::paccDynamic)));
HXLINE( 262)		this->setVar(HX_("downscroll",ef,45,d4,4f), ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("downscroll",ef,45,d4,4f),::hx::paccDynamic)));
HXLINE( 264)		this->setVar(HX_("curStep",ec,58,71,b7),0);
HXLINE( 265)		this->setVar(HX_("curBeat",16,53,29,ac),0);
HXLINE( 266)		this->setVar(HX_("crochet",34,d5,b5,d4),::Conductor_obj::stepCrochet);
HXLINE( 267)		this->setVar(HX_("safeZoneOffset",8c,9a,25,8d),::Conductor_obj::safeZoneOffset);
HXLINE( 269)		this->setVar(HX_("hudZoom",6a,47,5d,7c),::PlayState_obj::instance->camHUD->zoom);
HXLINE( 270)		this->setVar(HX_("cameraZoom",58,cc,16,b7),::flixel::FlxG_obj::camera->zoom);
HXLINE( 272)		this->setVar(HX_("cameraAngle",ee,36,28,17),::flixel::FlxG_obj::camera->angle);
HXLINE( 273)		this->setVar(HX_("camHudAngle",cb,c2,43,4c),::PlayState_obj::instance->camHUD->angle);
HXLINE( 275)		this->setVar(HX_("followXOffset",ba,cc,46,b7),0);
HXLINE( 276)		this->setVar(HX_("followYOffset",7b,43,dc,e0),0);
HXLINE( 278)		this->setVar(HX_("showOnlyStrums",f3,ec,e4,3c),false);
HXLINE( 279)		this->setVar(HX_("strumLine1Visible",1e,97,fd,b5),true);
HXLINE( 280)		this->setVar(HX_("strumLine2Visible",3d,09,30,ef),true);
HXLINE( 282)		this->setVar(HX_("screenWidth",fa,02,e8,81),::flixel::FlxG_obj::width);
HXLINE( 283)		this->setVar(HX_("screenHeight",73,10,6a,df),::flixel::FlxG_obj::height);
HXLINE( 284)		this->setVar(HX_("hudWidth",cf,dd,0d,97),::PlayState_obj::instance->camHUD->width);
HXLINE( 285)		this->setVar(HX_("hudHeight",fe,af,63,4b),::PlayState_obj::instance->camHUD->height);
HXLINE( 287)		this->setVar(HX_("mustHit",ca,3b,5d,00),false);
HXLINE( 289)		this->setVar(HX_("strumLineY",dc,27,b3,0d),::PlayState_obj::instance->strumLine->y);
HXLINE( 295)		 ::Dynamic _hx_tmp5 = ::haxe::Log_obj::trace;
HXDLIN( 295)		 cpp::Reference<lua_State> l1 = ::ModchartState_obj::lua;
HXDLIN( 295)		::llua::Lua_helper_obj::callbacks->set(HX_("makeSprite",93,b0,65,15),this->makeLuaSprite_dyn());
HXDLIN( 295)		linc::callbacks::add_callback_function(l1,HX_("makeSprite",93,b0,65,15));
HXDLIN( 295)		_hx_tmp5(true,::hx::SourceInfo(HX_("source_brian/ModchartState.hx",36,d4,94,59),295,HX_("ModchartState",75,11,f2,8b),HX_("new",60,d0,53,00)));
HXLINE( 297)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			bool _hx_run(::String id){
            				HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_297_new)
HXLINE( 298)				 ::flixel::FlxSprite sprite = ( ( ::flixel::FlxSprite)(::ModchartState_obj::luaSprites->get(id)) );
HXLINE( 299)				if (::hx::IsNull( sprite )) {
HXLINE( 300)					return false;
            				}
HXLINE( 301)				::PlayState_obj::instance->removeObject(sprite);
HXLINE( 302)				return true;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 297)			 cpp::Reference<lua_State> l2 = ::ModchartState_obj::lua;
HXDLIN( 297)			::llua::Lua_helper_obj::callbacks->set(HX_("destroySprite",9f,74,8f,91), ::Dynamic(new _hx_Closure_0()));
HXDLIN( 297)			linc::callbacks::add_callback_function(l2,HX_("destroySprite",9f,74,8f,91));
            		}
HXLINE( 307)		 ::Dynamic _hx_tmp6 = ::haxe::Log_obj::trace;
HXDLIN( 307)		 cpp::Reference<lua_State> l3 = ::ModchartState_obj::lua;
HXDLIN( 307)		::llua::Lua_helper_obj::callbacks->set(HX_("setHudAngle",5e,35,ee,1f), ::Dynamic(new _hx_Closure_1()));
HXDLIN( 307)		linc::callbacks::add_callback_function(l3,HX_("setHudAngle",5e,35,ee,1f));
HXDLIN( 307)		_hx_tmp6(true,::hx::SourceInfo(HX_("source_brian/ModchartState.hx",36,d4,94,59),307,HX_("ModchartState",75,11,f2,8b),HX_("new",60,d0,53,00)));
HXLINE( 311)		 ::Dynamic _hx_tmp7 = ::haxe::Log_obj::trace;
HXDLIN( 311)		 cpp::Reference<lua_State> l4 = ::ModchartState_obj::lua;
HXDLIN( 311)		::llua::Lua_helper_obj::callbacks->set(HX_("setHudPosition",fe,f7,1b,ef), ::Dynamic(new _hx_Closure_2()));
HXDLIN( 311)		linc::callbacks::add_callback_function(l4,HX_("setHudPosition",fe,f7,1b,ef));
HXDLIN( 311)		_hx_tmp7(true,::hx::SourceInfo(HX_("source_brian/ModchartState.hx",36,d4,94,59),311,HX_("ModchartState",75,11,f2,8b),HX_("new",60,d0,53,00)));
HXLINE( 316)		 ::Dynamic _hx_tmp8 = ::haxe::Log_obj::trace;
HXDLIN( 316)		 cpp::Reference<lua_State> l5 = ::ModchartState_obj::lua;
HXDLIN( 316)		::llua::Lua_helper_obj::callbacks->set(HX_("getHudX",77,ff,99,17), ::Dynamic(new _hx_Closure_3()));
HXDLIN( 316)		linc::callbacks::add_callback_function(l5,HX_("getHudX",77,ff,99,17));
HXDLIN( 316)		_hx_tmp8(true,::hx::SourceInfo(HX_("source_brian/ModchartState.hx",36,d4,94,59),316,HX_("ModchartState",75,11,f2,8b),HX_("new",60,d0,53,00)));
HXLINE( 320)		 ::Dynamic _hx_tmp9 = ::haxe::Log_obj::trace;
HXDLIN( 320)		 cpp::Reference<lua_State> l6 = ::ModchartState_obj::lua;
HXDLIN( 320)		::llua::Lua_helper_obj::callbacks->set(HX_("getHudY",78,ff,99,17), ::Dynamic(new _hx_Closure_4()));
HXDLIN( 320)		linc::callbacks::add_callback_function(l6,HX_("getHudY",78,ff,99,17));
HXDLIN( 320)		_hx_tmp9(true,::hx::SourceInfo(HX_("source_brian/ModchartState.hx",36,d4,94,59),320,HX_("ModchartState",75,11,f2,8b),HX_("new",60,d0,53,00)));
HXLINE( 324)		 ::Dynamic _hx_tmp10 = ::haxe::Log_obj::trace;
HXDLIN( 324)		 cpp::Reference<lua_State> l7 = ::ModchartState_obj::lua;
HXDLIN( 324)		::llua::Lua_helper_obj::callbacks->set(HX_("setCamPosition",56,33,6f,cf), ::Dynamic(new _hx_Closure_5()));
HXDLIN( 324)		linc::callbacks::add_callback_function(l7,HX_("setCamPosition",56,33,6f,cf));
HXDLIN( 324)		_hx_tmp10(true,::hx::SourceInfo(HX_("source_brian/ModchartState.hx",36,d4,94,59),324,HX_("ModchartState",75,11,f2,8b),HX_("new",60,d0,53,00)));
HXLINE( 329)		 ::Dynamic _hx_tmp11 = ::haxe::Log_obj::trace;
HXDLIN( 329)		 cpp::Reference<lua_State> l8 = ::ModchartState_obj::lua;
HXDLIN( 329)		::llua::Lua_helper_obj::callbacks->set(HX_("getCameraX",1d,10,93,32), ::Dynamic(new _hx_Closure_6()));
HXDLIN( 329)		linc::callbacks::add_callback_function(l8,HX_("getCameraX",1d,10,93,32));
HXDLIN( 329)		_hx_tmp11(true,::hx::SourceInfo(HX_("source_brian/ModchartState.hx",36,d4,94,59),329,HX_("ModchartState",75,11,f2,8b),HX_("new",60,d0,53,00)));
HXLINE( 333)		 ::Dynamic _hx_tmp12 = ::haxe::Log_obj::trace;
HXDLIN( 333)		 cpp::Reference<lua_State> l9 = ::ModchartState_obj::lua;
HXDLIN( 333)		::llua::Lua_helper_obj::callbacks->set(HX_("getCameraY",1e,10,93,32), ::Dynamic(new _hx_Closure_7()));
HXDLIN( 333)		linc::callbacks::add_callback_function(l9,HX_("getCameraY",1e,10,93,32));
HXDLIN( 333)		_hx_tmp12(true,::hx::SourceInfo(HX_("source_brian/ModchartState.hx",36,d4,94,59),333,HX_("ModchartState",75,11,f2,8b),HX_("new",60,d0,53,00)));
HXLINE( 337)		 ::Dynamic _hx_tmp13 = ::haxe::Log_obj::trace;
HXDLIN( 337)		 cpp::Reference<lua_State> l10 = ::ModchartState_obj::lua;
HXDLIN( 337)		::llua::Lua_helper_obj::callbacks->set(HX_("setCamZoom",40,1b,c9,2e), ::Dynamic(new _hx_Closure_8()));
HXDLIN( 337)		linc::callbacks::add_callback_function(l10,HX_("setCamZoom",40,1b,c9,2e));
HXDLIN( 337)		_hx_tmp13(true,::hx::SourceInfo(HX_("source_brian/ModchartState.hx",36,d4,94,59),337,HX_("ModchartState",75,11,f2,8b),HX_("new",60,d0,53,00)));
HXLINE( 341)		 ::Dynamic _hx_tmp14 = ::haxe::Log_obj::trace;
HXDLIN( 341)		 cpp::Reference<lua_State> l11 = ::ModchartState_obj::lua;
HXDLIN( 341)		::llua::Lua_helper_obj::callbacks->set(HX_("setHudZoom",e8,6b,3c,cf), ::Dynamic(new _hx_Closure_9()));
HXDLIN( 341)		linc::callbacks::add_callback_function(l11,HX_("setHudZoom",e8,6b,3c,cf));
HXDLIN( 341)		_hx_tmp14(true,::hx::SourceInfo(HX_("source_brian/ModchartState.hx",36,d4,94,59),341,HX_("ModchartState",75,11,f2,8b),HX_("new",60,d0,53,00)));
HXLINE( 347)		 ::Dynamic _hx_tmp15 = ::haxe::Log_obj::trace;
HXDLIN( 347)		 cpp::Reference<lua_State> l12 = ::ModchartState_obj::lua;
HXDLIN( 347)		::llua::Lua_helper_obj::callbacks->set(HX_("getRenderedNotes",56,30,5d,2f), ::Dynamic(new _hx_Closure_10()));
HXDLIN( 347)		linc::callbacks::add_callback_function(l12,HX_("getRenderedNotes",56,30,5d,2f));
HXDLIN( 347)		_hx_tmp15(true,::hx::SourceInfo(HX_("source_brian/ModchartState.hx",36,d4,94,59),347,HX_("ModchartState",75,11,f2,8b),HX_("new",60,d0,53,00)));
HXLINE( 351)		 ::Dynamic _hx_tmp16 = ::haxe::Log_obj::trace;
HXDLIN( 351)		 cpp::Reference<lua_State> l13 = ::ModchartState_obj::lua;
HXDLIN( 351)		::llua::Lua_helper_obj::callbacks->set(HX_("getRenderedNoteX",3b,30,5d,2f), ::Dynamic(new _hx_Closure_11()));
HXDLIN( 351)		linc::callbacks::add_callback_function(l13,HX_("getRenderedNoteX",3b,30,5d,2f));
HXDLIN( 351)		_hx_tmp16(true,::hx::SourceInfo(HX_("source_brian/ModchartState.hx",36,d4,94,59),351,HX_("ModchartState",75,11,f2,8b),HX_("new",60,d0,53,00)));
HXLINE( 355)		 ::Dynamic _hx_tmp17 = ::haxe::Log_obj::trace;
HXDLIN( 355)		 cpp::Reference<lua_State> l14 = ::ModchartState_obj::lua;
HXDLIN( 355)		::llua::Lua_helper_obj::callbacks->set(HX_("getRenderedNoteY",3c,30,5d,2f), ::Dynamic(new _hx_Closure_12()));
HXDLIN( 355)		linc::callbacks::add_callback_function(l14,HX_("getRenderedNoteY",3c,30,5d,2f));
HXDLIN( 355)		_hx_tmp17(true,::hx::SourceInfo(HX_("source_brian/ModchartState.hx",36,d4,94,59),355,HX_("ModchartState",75,11,f2,8b),HX_("new",60,d0,53,00)));
HXLINE( 359)		 ::Dynamic _hx_tmp18 = ::haxe::Log_obj::trace;
HXDLIN( 359)		 cpp::Reference<lua_State> l15 = ::ModchartState_obj::lua;
HXDLIN( 359)		::llua::Lua_helper_obj::callbacks->set(HX_("getRenderedNoteType",d7,be,b7,e7), ::Dynamic(new _hx_Closure_13()));
HXDLIN( 359)		linc::callbacks::add_callback_function(l15,HX_("getRenderedNoteType",d7,be,b7,e7));
HXDLIN( 359)		_hx_tmp18(true,::hx::SourceInfo(HX_("source_brian/ModchartState.hx",36,d4,94,59),359,HX_("ModchartState",75,11,f2,8b),HX_("new",60,d0,53,00)));
HXLINE( 363)		 ::Dynamic _hx_tmp19 = ::haxe::Log_obj::trace;
HXDLIN( 363)		 cpp::Reference<lua_State> l16 = ::ModchartState_obj::lua;
HXDLIN( 363)		::llua::Lua_helper_obj::callbacks->set(HX_("isSustain",d9,79,ef,fd), ::Dynamic(new _hx_Closure_14()));
HXDLIN( 363)		linc::callbacks::add_callback_function(l16,HX_("isSustain",d9,79,ef,fd));
HXDLIN( 363)		_hx_tmp19(true,::hx::SourceInfo(HX_("source_brian/ModchartState.hx",36,d4,94,59),363,HX_("ModchartState",75,11,f2,8b),HX_("new",60,d0,53,00)));
HXLINE( 367)		 ::Dynamic _hx_tmp20 = ::haxe::Log_obj::trace;
HXDLIN( 367)		 cpp::Reference<lua_State> l17 = ::ModchartState_obj::lua;
HXDLIN( 367)		::llua::Lua_helper_obj::callbacks->set(HX_("isParentSustain",4f,c2,06,db), ::Dynamic(new _hx_Closure_15()));
HXDLIN( 367)		linc::callbacks::add_callback_function(l17,HX_("isParentSustain",4f,c2,06,db));
HXDLIN( 367)		_hx_tmp20(true,::hx::SourceInfo(HX_("source_brian/ModchartState.hx",36,d4,94,59),367,HX_("ModchartState",75,11,f2,8b),HX_("new",60,d0,53,00)));
HXLINE( 372)		 ::Dynamic _hx_tmp21 = ::haxe::Log_obj::trace;
HXDLIN( 372)		 cpp::Reference<lua_State> l18 = ::ModchartState_obj::lua;
HXDLIN( 372)		::llua::Lua_helper_obj::callbacks->set(HX_("getRenderedNoteParentX",f1,63,8a,91), ::Dynamic(new _hx_Closure_16()));
HXDLIN( 372)		linc::callbacks::add_callback_function(l18,HX_("getRenderedNoteParentX",f1,63,8a,91));
HXDLIN( 372)		_hx_tmp21(true,::hx::SourceInfo(HX_("source_brian/ModchartState.hx",36,d4,94,59),372,HX_("ModchartState",75,11,f2,8b),HX_("new",60,d0,53,00)));
HXLINE( 376)		 ::Dynamic _hx_tmp22 = ::haxe::Log_obj::trace;
HXDLIN( 376)		 cpp::Reference<lua_State> l19 = ::ModchartState_obj::lua;
HXDLIN( 376)		::llua::Lua_helper_obj::callbacks->set(HX_("getRenderedNoteParentY",f2,63,8a,91), ::Dynamic(new _hx_Closure_17()));
HXDLIN( 376)		linc::callbacks::add_callback_function(l19,HX_("getRenderedNoteParentY",f2,63,8a,91));
HXDLIN( 376)		_hx_tmp22(true,::hx::SourceInfo(HX_("source_brian/ModchartState.hx",36,d4,94,59),376,HX_("ModchartState",75,11,f2,8b),HX_("new",60,d0,53,00)));
HXLINE( 380)		 ::Dynamic _hx_tmp23 = ::haxe::Log_obj::trace;
HXDLIN( 380)		 cpp::Reference<lua_State> l20 = ::ModchartState_obj::lua;
HXDLIN( 380)		::llua::Lua_helper_obj::callbacks->set(HX_("getRenderedNoteHit",d6,2c,2a,a5), ::Dynamic(new _hx_Closure_18()));
HXDLIN( 380)		linc::callbacks::add_callback_function(l20,HX_("getRenderedNoteHit",d6,2c,2a,a5));
HXDLIN( 380)		_hx_tmp23(true,::hx::SourceInfo(HX_("source_brian/ModchartState.hx",36,d4,94,59),380,HX_("ModchartState",75,11,f2,8b),HX_("new",60,d0,53,00)));
HXLINE( 384)		 ::Dynamic _hx_tmp24 = ::haxe::Log_obj::trace;
HXDLIN( 384)		 cpp::Reference<lua_State> l21 = ::ModchartState_obj::lua;
HXDLIN( 384)		::llua::Lua_helper_obj::callbacks->set(HX_("getRenderedNoteCalcX",66,37,5f,ff), ::Dynamic(new _hx_Closure_19()));
HXDLIN( 384)		linc::callbacks::add_callback_function(l21,HX_("getRenderedNoteCalcX",66,37,5f,ff));
HXDLIN( 384)		_hx_tmp24(true,::hx::SourceInfo(HX_("source_brian/ModchartState.hx",36,d4,94,59),384,HX_("ModchartState",75,11,f2,8b),HX_("new",60,d0,53,00)));
HXLINE( 390)		 ::Dynamic _hx_tmp25 = ::haxe::Log_obj::trace;
HXDLIN( 390)		 cpp::Reference<lua_State> l22 = ::ModchartState_obj::lua;
HXDLIN( 390)		::llua::Lua_helper_obj::callbacks->set(HX_("anyNotes",b5,39,7d,1e), ::Dynamic(new _hx_Closure_20()));
HXDLIN( 390)		linc::callbacks::add_callback_function(l22,HX_("anyNotes",b5,39,7d,1e));
HXDLIN( 390)		_hx_tmp25(true,::hx::SourceInfo(HX_("source_brian/ModchartState.hx",36,d4,94,59),390,HX_("ModchartState",75,11,f2,8b),HX_("new",60,d0,53,00)));
HXLINE( 394)		 ::Dynamic _hx_tmp26 = ::haxe::Log_obj::trace;
HXDLIN( 394)		 cpp::Reference<lua_State> l23 = ::ModchartState_obj::lua;
HXDLIN( 394)		::llua::Lua_helper_obj::callbacks->set(HX_("getRenderedNoteStrumtime",99,2c,cf,5d), ::Dynamic(new _hx_Closure_21()));
HXDLIN( 394)		linc::callbacks::add_callback_function(l23,HX_("getRenderedNoteStrumtime",99,2c,cf,5d));
HXDLIN( 394)		_hx_tmp26(true,::hx::SourceInfo(HX_("source_brian/ModchartState.hx",36,d4,94,59),394,HX_("ModchartState",75,11,f2,8b),HX_("new",60,d0,53,00)));
HXLINE( 398)		 ::Dynamic _hx_tmp27 = ::haxe::Log_obj::trace;
HXDLIN( 398)		 cpp::Reference<lua_State> l24 = ::ModchartState_obj::lua;
HXDLIN( 398)		::llua::Lua_helper_obj::callbacks->set(HX_("getRenderedNoteScaleX",eb,b7,35,f9), ::Dynamic(new _hx_Closure_22()));
HXDLIN( 398)		linc::callbacks::add_callback_function(l24,HX_("getRenderedNoteScaleX",eb,b7,35,f9));
HXDLIN( 398)		_hx_tmp27(true,::hx::SourceInfo(HX_("source_brian/ModchartState.hx",36,d4,94,59),398,HX_("ModchartState",75,11,f2,8b),HX_("new",60,d0,53,00)));
HXLINE( 402)		 ::Dynamic _hx_tmp28 = ::haxe::Log_obj::trace;
HXDLIN( 402)		 cpp::Reference<lua_State> l25 = ::ModchartState_obj::lua;
HXDLIN( 402)		::llua::Lua_helper_obj::callbacks->set(HX_("setRenderedNotePos",8b,76,df,81), ::Dynamic(new _hx_Closure_23()));
HXDLIN( 402)		linc::callbacks::add_callback_function(l25,HX_("setRenderedNotePos",8b,76,df,81));
HXDLIN( 402)		_hx_tmp28(true,::hx::SourceInfo(HX_("source_brian/ModchartState.hx",36,d4,94,59),402,HX_("ModchartState",75,11,f2,8b),HX_("new",60,d0,53,00)));
HXLINE( 413)		 ::Dynamic _hx_tmp29 = ::haxe::Log_obj::trace;
HXDLIN( 413)		 cpp::Reference<lua_State> l26 = ::ModchartState_obj::lua;
HXDLIN( 413)		::llua::Lua_helper_obj::callbacks->set(HX_("setRenderedNoteAlpha",15,2c,92,ac), ::Dynamic(new _hx_Closure_24()));
HXDLIN( 413)		linc::callbacks::add_callback_function(l26,HX_("setRenderedNoteAlpha",15,2c,92,ac));
HXDLIN( 413)		_hx_tmp29(true,::hx::SourceInfo(HX_("source_brian/ModchartState.hx",36,d4,94,59),413,HX_("ModchartState",75,11,f2,8b),HX_("new",60,d0,53,00)));
HXLINE( 418)		 ::Dynamic _hx_tmp30 = ::haxe::Log_obj::trace;
HXDLIN( 418)		 cpp::Reference<lua_State> l27 = ::ModchartState_obj::lua;
HXDLIN( 418)		::llua::Lua_helper_obj::callbacks->set(HX_("setRenderedNoteScale",41,53,ca,03), ::Dynamic(new _hx_Closure_25()));
HXDLIN( 418)		linc::callbacks::add_callback_function(l27,HX_("setRenderedNoteScale",41,53,ca,03));
HXDLIN( 418)		_hx_tmp30(true,::hx::SourceInfo(HX_("source_brian/ModchartState.hx",36,d4,94,59),418,HX_("ModchartState",75,11,f2,8b),HX_("new",60,d0,53,00)));
HXLINE( 423)		 ::Dynamic _hx_tmp31 = ::haxe::Log_obj::trace;
HXDLIN( 423)		 cpp::Reference<lua_State> l28 = ::ModchartState_obj::lua;
HXDLIN( 423)		::llua::Lua_helper_obj::callbacks->set(HX_("setRenderedNoteScale",41,53,ca,03), ::Dynamic(new _hx_Closure_26()));
HXDLIN( 423)		linc::callbacks::add_callback_function(l28,HX_("setRenderedNoteScale",41,53,ca,03));
HXDLIN( 423)		_hx_tmp31(true,::hx::SourceInfo(HX_("source_brian/ModchartState.hx",36,d4,94,59),423,HX_("ModchartState",75,11,f2,8b),HX_("new",60,d0,53,00)));
HXLINE( 428)		 ::Dynamic _hx_tmp32 = ::haxe::Log_obj::trace;
HXDLIN( 428)		 cpp::Reference<lua_State> l29 = ::ModchartState_obj::lua;
HXDLIN( 428)		::llua::Lua_helper_obj::callbacks->set(HX_("getRenderedNoteWidth",49,83,a6,88), ::Dynamic(new _hx_Closure_27()));
HXDLIN( 428)		linc::callbacks::add_callback_function(l29,HX_("getRenderedNoteWidth",49,83,a6,88));
HXDLIN( 428)		_hx_tmp32(true,::hx::SourceInfo(HX_("source_brian/ModchartState.hx",36,d4,94,59),428,HX_("ModchartState",75,11,f2,8b),HX_("new",60,d0,53,00)));
HXLINE( 433)		 ::Dynamic _hx_tmp33 = ::haxe::Log_obj::trace;
HXDLIN( 433)		 cpp::Reference<lua_State> l30 = ::ModchartState_obj::lua;
HXDLIN( 433)		::llua::Lua_helper_obj::callbacks->set(HX_("setRenderedNoteAngle",8a,c8,dd,ad), ::Dynamic(new _hx_Closure_28()));
HXDLIN( 433)		linc::callbacks::add_callback_function(l30,HX_("setRenderedNoteAngle",8a,c8,dd,ad));
HXDLIN( 433)		_hx_tmp33(true,::hx::SourceInfo(HX_("source_brian/ModchartState.hx",36,d4,94,59),433,HX_("ModchartState",75,11,f2,8b),HX_("new",60,d0,53,00)));
HXLINE( 438)		 ::Dynamic _hx_tmp34 = ::haxe::Log_obj::trace;
HXDLIN( 438)		 cpp::Reference<lua_State> l31 = ::ModchartState_obj::lua;
HXDLIN( 438)		::llua::Lua_helper_obj::callbacks->set(HX_("setActorX",05,41,f2,75), ::Dynamic(new _hx_Closure_29(_gthis)));
HXDLIN( 438)		linc::callbacks::add_callback_function(l31,HX_("setActorX",05,41,f2,75));
HXDLIN( 438)		_hx_tmp34(true,::hx::SourceInfo(HX_("source_brian/ModchartState.hx",36,d4,94,59),438,HX_("ModchartState",75,11,f2,8b),HX_("new",60,d0,53,00)));
HXLINE( 442)		 ::Dynamic _hx_tmp35 = ::haxe::Log_obj::trace;
HXDLIN( 442)		 cpp::Reference<lua_State> l32 = ::ModchartState_obj::lua;
HXDLIN( 442)		::llua::Lua_helper_obj::callbacks->set(HX_("setActorAlpha",6b,b2,28,4d), ::Dynamic(new _hx_Closure_30(_gthis)));
HXDLIN( 442)		linc::callbacks::add_callback_function(l32,HX_("setActorAlpha",6b,b2,28,4d));
HXDLIN( 442)		_hx_tmp35(true,::hx::SourceInfo(HX_("source_brian/ModchartState.hx",36,d4,94,59),442,HX_("ModchartState",75,11,f2,8b),HX_("new",60,d0,53,00)));
HXLINE( 446)		 ::Dynamic _hx_tmp36 = ::haxe::Log_obj::trace;
HXDLIN( 446)		 cpp::Reference<lua_State> l33 = ::ModchartState_obj::lua;
HXDLIN( 446)		::llua::Lua_helper_obj::callbacks->set(HX_("setActorY",06,41,f2,75), ::Dynamic(new _hx_Closure_31(_gthis)));
HXDLIN( 446)		linc::callbacks::add_callback_function(l33,HX_("setActorY",06,41,f2,75));
HXDLIN( 446)		_hx_tmp36(true,::hx::SourceInfo(HX_("source_brian/ModchartState.hx",36,d4,94,59),446,HX_("ModchartState",75,11,f2,8b),HX_("new",60,d0,53,00)));
HXLINE( 450)		 ::Dynamic _hx_tmp37 = ::haxe::Log_obj::trace;
HXDLIN( 450)		 cpp::Reference<lua_State> l34 = ::ModchartState_obj::lua;
HXDLIN( 450)		::llua::Lua_helper_obj::callbacks->set(HX_("setActorAngle",e0,4e,74,4e), ::Dynamic(new _hx_Closure_32(_gthis)));
HXDLIN( 450)		linc::callbacks::add_callback_function(l34,HX_("setActorAngle",e0,4e,74,4e));
HXDLIN( 450)		_hx_tmp37(true,::hx::SourceInfo(HX_("source_brian/ModchartState.hx",36,d4,94,59),450,HX_("ModchartState",75,11,f2,8b),HX_("new",60,d0,53,00)));
HXLINE( 454)		 ::Dynamic _hx_tmp38 = ::haxe::Log_obj::trace;
HXDLIN( 454)		 cpp::Reference<lua_State> l35 = ::ModchartState_obj::lua;
HXDLIN( 454)		::llua::Lua_helper_obj::callbacks->set(HX_("setActorScale",97,d9,60,a4), ::Dynamic(new _hx_Closure_33(_gthis)));
HXDLIN( 454)		linc::callbacks::add_callback_function(l35,HX_("setActorScale",97,d9,60,a4));
HXDLIN( 454)		_hx_tmp38(true,::hx::SourceInfo(HX_("source_brian/ModchartState.hx",36,d4,94,59),454,HX_("ModchartState",75,11,f2,8b),HX_("new",60,d0,53,00)));
HXLINE( 459)		 ::Dynamic _hx_tmp39 = ::haxe::Log_obj::trace;
HXDLIN( 459)		 cpp::Reference<lua_State> l36 = ::ModchartState_obj::lua;
HXDLIN( 459)		::llua::Lua_helper_obj::callbacks->set(HX_("getActorWidth",07,df,ee,b0), ::Dynamic(new _hx_Closure_34(_gthis)));
HXDLIN( 459)		linc::callbacks::add_callback_function(l36,HX_("getActorWidth",07,df,ee,b0));
HXDLIN( 459)		_hx_tmp39(true,::hx::SourceInfo(HX_("source_brian/ModchartState.hx",36,d4,94,59),459,HX_("ModchartState",75,11,f2,8b),HX_("new",60,d0,53,00)));
HXLINE( 463)		 ::Dynamic _hx_tmp40 = ::haxe::Log_obj::trace;
HXDLIN( 463)		 cpp::Reference<lua_State> l37 = ::ModchartState_obj::lua;
HXDLIN( 463)		::llua::Lua_helper_obj::callbacks->set(HX_("getActorHeight",c6,bf,63,d6), ::Dynamic(new _hx_Closure_35(_gthis)));
HXDLIN( 463)		linc::callbacks::add_callback_function(l37,HX_("getActorHeight",c6,bf,63,d6));
HXDLIN( 463)		_hx_tmp40(true,::hx::SourceInfo(HX_("source_brian/ModchartState.hx",36,d4,94,59),463,HX_("ModchartState",75,11,f2,8b),HX_("new",60,d0,53,00)));
HXLINE( 467)		 ::Dynamic _hx_tmp41 = ::haxe::Log_obj::trace;
HXDLIN( 467)		 cpp::Reference<lua_State> l38 = ::ModchartState_obj::lua;
HXDLIN( 467)		::llua::Lua_helper_obj::callbacks->set(HX_("getActorAlpha",5f,d0,22,08), ::Dynamic(new _hx_Closure_36(_gthis)));
HXDLIN( 467)		linc::callbacks::add_callback_function(l38,HX_("getActorAlpha",5f,d0,22,08));
HXDLIN( 467)		_hx_tmp41(true,::hx::SourceInfo(HX_("source_brian/ModchartState.hx",36,d4,94,59),467,HX_("ModchartState",75,11,f2,8b),HX_("new",60,d0,53,00)));
HXLINE( 471)		 ::Dynamic _hx_tmp42 = ::haxe::Log_obj::trace;
HXDLIN( 471)		 cpp::Reference<lua_State> l39 = ::ModchartState_obj::lua;
HXDLIN( 471)		::llua::Lua_helper_obj::callbacks->set(HX_("getActorAngle",d4,6c,6e,09), ::Dynamic(new _hx_Closure_37(_gthis)));
HXDLIN( 471)		linc::callbacks::add_callback_function(l39,HX_("getActorAngle",d4,6c,6e,09));
HXDLIN( 471)		_hx_tmp42(true,::hx::SourceInfo(HX_("source_brian/ModchartState.hx",36,d4,94,59),471,HX_("ModchartState",75,11,f2,8b),HX_("new",60,d0,53,00)));
HXLINE( 475)		 ::Dynamic _hx_tmp43 = ::haxe::Log_obj::trace;
HXDLIN( 475)		 cpp::Reference<lua_State> l40 = ::ModchartState_obj::lua;
HXDLIN( 475)		::llua::Lua_helper_obj::callbacks->set(HX_("getActorX",f9,54,a1,92), ::Dynamic(new _hx_Closure_38(_gthis)));
HXDLIN( 475)		linc::callbacks::add_callback_function(l40,HX_("getActorX",f9,54,a1,92));
HXDLIN( 475)		_hx_tmp43(true,::hx::SourceInfo(HX_("source_brian/ModchartState.hx",36,d4,94,59),475,HX_("ModchartState",75,11,f2,8b),HX_("new",60,d0,53,00)));
HXLINE( 479)		 ::Dynamic _hx_tmp44 = ::haxe::Log_obj::trace;
HXDLIN( 479)		 cpp::Reference<lua_State> l41 = ::ModchartState_obj::lua;
HXDLIN( 479)		::llua::Lua_helper_obj::callbacks->set(HX_("getActorY",fa,54,a1,92), ::Dynamic(new _hx_Closure_39(_gthis)));
HXDLIN( 479)		linc::callbacks::add_callback_function(l41,HX_("getActorY",fa,54,a1,92));
HXDLIN( 479)		_hx_tmp44(true,::hx::SourceInfo(HX_("source_brian/ModchartState.hx",36,d4,94,59),479,HX_("ModchartState",75,11,f2,8b),HX_("new",60,d0,53,00)));
HXLINE( 486)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_41, ::ModchartState,_gthis) HXARGC(4)
            			void _hx_run(int toX,int toY,Float time,::String onComplete){
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_40, ::ModchartState,_gthis,::String,onComplete) HXARGC(1)
            				void _hx_run( ::flixel::tweens::FlxTween flxTween){
            					HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_487_new)
HXLINE( 487)					bool _hx_tmp;
HXDLIN( 487)					if ((onComplete != HX_("",00,00,00,00))) {
HXLINE( 487)						_hx_tmp = ::hx::IsNotNull( onComplete );
            					}
            					else {
HXLINE( 487)						_hx_tmp = false;
            					}
HXDLIN( 487)					if (_hx_tmp) {
HXLINE( 487)						_gthis->callLua(onComplete,::cpp::VirtualArray_obj::__new(1)->init(0,HX_("camera",a5,46,8c,b7)),null());
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_487_new)
HXLINE( 487)				::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("x",78,00,00,00),toX)
            					->setFixed(1,HX_("y",79,00,00,00),toY)),time, ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeIn_dyn())
            					->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_40(_gthis,onComplete)))));
            			}
            			HX_END_LOCAL_FUNC4((void))

HXLINE( 486)			 cpp::Reference<lua_State> l42 = ::ModchartState_obj::lua;
HXDLIN( 486)			::llua::Lua_helper_obj::callbacks->set(HX_("tweenCameraPos",04,d4,4d,e7), ::Dynamic(new _hx_Closure_41(_gthis)));
HXDLIN( 486)			linc::callbacks::add_callback_function(l42,HX_("tweenCameraPos",04,d4,4d,e7));
            		}
HXLINE( 490)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_43, ::ModchartState,_gthis) HXARGC(3)
            			void _hx_run(Float toAngle,Float time,::String onComplete){
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_42, ::ModchartState,_gthis,::String,onComplete) HXARGC(1)
            				void _hx_run( ::flixel::tweens::FlxTween flxTween){
            					HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_491_new)
HXLINE( 491)					bool _hx_tmp;
HXDLIN( 491)					if ((onComplete != HX_("",00,00,00,00))) {
HXLINE( 491)						_hx_tmp = ::hx::IsNotNull( onComplete );
            					}
            					else {
HXLINE( 491)						_hx_tmp = false;
            					}
HXDLIN( 491)					if (_hx_tmp) {
HXLINE( 491)						_gthis->callLua(onComplete,::cpp::VirtualArray_obj::__new(1)->init(0,HX_("camera",a5,46,8c,b7)),null());
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_491_new)
HXLINE( 491)				::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("angle",d3,43,e2,22),toAngle)),time, ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeIn_dyn())
            					->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_42(_gthis,onComplete)))));
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE( 490)			 cpp::Reference<lua_State> l43 = ::ModchartState_obj::lua;
HXDLIN( 490)			::llua::Lua_helper_obj::callbacks->set(HX_("tweenCameraAngle",43,36,b9,11), ::Dynamic(new _hx_Closure_43(_gthis)));
HXDLIN( 490)			linc::callbacks::add_callback_function(l43,HX_("tweenCameraAngle",43,36,b9,11));
            		}
HXLINE( 494)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_45, ::ModchartState,_gthis) HXARGC(3)
            			void _hx_run(Float toZoom,Float time,::String onComplete){
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_44, ::ModchartState,_gthis,::String,onComplete) HXARGC(1)
            				void _hx_run( ::flixel::tweens::FlxTween flxTween){
            					HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_495_new)
HXLINE( 495)					bool _hx_tmp;
HXDLIN( 495)					if ((onComplete != HX_("",00,00,00,00))) {
HXLINE( 495)						_hx_tmp = ::hx::IsNotNull( onComplete );
            					}
            					else {
HXLINE( 495)						_hx_tmp = false;
            					}
HXDLIN( 495)					if (_hx_tmp) {
HXLINE( 495)						_gthis->callLua(onComplete,::cpp::VirtualArray_obj::__new(1)->init(0,HX_("camera",a5,46,8c,b7)),null());
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_495_new)
HXLINE( 495)				::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("zoom",13,a3,f8,50),toZoom)),time, ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeIn_dyn())
            					->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_44(_gthis,onComplete)))));
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE( 494)			 cpp::Reference<lua_State> l44 = ::ModchartState_obj::lua;
HXDLIN( 494)			::llua::Lua_helper_obj::callbacks->set(HX_("tweenCameraZoom",a3,ce,67,83), ::Dynamic(new _hx_Closure_45(_gthis)));
HXDLIN( 494)			linc::callbacks::add_callback_function(l44,HX_("tweenCameraZoom",a3,ce,67,83));
            		}
HXLINE( 498)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_47, ::ModchartState,_gthis) HXARGC(4)
            			void _hx_run(int toX,int toY,Float time,::String onComplete){
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_46, ::ModchartState,_gthis,::String,onComplete) HXARGC(1)
            				void _hx_run( ::flixel::tweens::FlxTween flxTween){
            					HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_499_new)
HXLINE( 499)					bool _hx_tmp;
HXDLIN( 499)					if ((onComplete != HX_("",00,00,00,00))) {
HXLINE( 499)						_hx_tmp = ::hx::IsNotNull( onComplete );
            					}
            					else {
HXLINE( 499)						_hx_tmp = false;
            					}
HXDLIN( 499)					if (_hx_tmp) {
HXLINE( 499)						_gthis->callLua(onComplete,::cpp::VirtualArray_obj::__new(1)->init(0,HX_("camera",a5,46,8c,b7)),null());
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_499_new)
HXLINE( 499)				::flixel::tweens::FlxTween_obj::tween(::PlayState_obj::instance->camHUD, ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("x",78,00,00,00),toX)
            					->setFixed(1,HX_("y",79,00,00,00),toY)),time, ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeIn_dyn())
            					->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_46(_gthis,onComplete)))));
            			}
            			HX_END_LOCAL_FUNC4((void))

HXLINE( 498)			 cpp::Reference<lua_State> l45 = ::ModchartState_obj::lua;
HXDLIN( 498)			::llua::Lua_helper_obj::callbacks->set(HX_("tweenHudPos",e8,11,af,d9), ::Dynamic(new _hx_Closure_47(_gthis)));
HXDLIN( 498)			linc::callbacks::add_callback_function(l45,HX_("tweenHudPos",e8,11,af,d9));
            		}
HXLINE( 502)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_49, ::ModchartState,_gthis) HXARGC(3)
            			void _hx_run(Float toAngle,Float time,::String onComplete){
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_48, ::ModchartState,_gthis,::String,onComplete) HXARGC(1)
            				void _hx_run( ::flixel::tweens::FlxTween flxTween){
            					HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_503_new)
HXLINE( 503)					bool _hx_tmp;
HXDLIN( 503)					if ((onComplete != HX_("",00,00,00,00))) {
HXLINE( 503)						_hx_tmp = ::hx::IsNotNull( onComplete );
            					}
            					else {
HXLINE( 503)						_hx_tmp = false;
            					}
HXDLIN( 503)					if (_hx_tmp) {
HXLINE( 503)						_gthis->callLua(onComplete,::cpp::VirtualArray_obj::__new(1)->init(0,HX_("camera",a5,46,8c,b7)),null());
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_503_new)
HXLINE( 503)				::flixel::tweens::FlxTween_obj::tween(::PlayState_obj::instance->camHUD, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("angle",d3,43,e2,22),toAngle)),time, ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeIn_dyn())
            					->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_48(_gthis,onComplete)))));
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE( 502)			 cpp::Reference<lua_State> l46 = ::ModchartState_obj::lua;
HXDLIN( 502)			::llua::Lua_helper_obj::callbacks->set(HX_("tweenHudAngle",27,b5,50,4d), ::Dynamic(new _hx_Closure_49(_gthis)));
HXDLIN( 502)			linc::callbacks::add_callback_function(l46,HX_("tweenHudAngle",27,b5,50,4d));
            		}
HXLINE( 506)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_51, ::ModchartState,_gthis) HXARGC(3)
            			void _hx_run(Float toZoom,Float time,::String onComplete){
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_50, ::ModchartState,_gthis,::String,onComplete) HXARGC(1)
            				void _hx_run( ::flixel::tweens::FlxTween flxTween){
            					HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_507_new)
HXLINE( 507)					bool _hx_tmp;
HXDLIN( 507)					if ((onComplete != HX_("",00,00,00,00))) {
HXLINE( 507)						_hx_tmp = ::hx::IsNotNull( onComplete );
            					}
            					else {
HXLINE( 507)						_hx_tmp = false;
            					}
HXDLIN( 507)					if (_hx_tmp) {
HXLINE( 507)						_gthis->callLua(onComplete,::cpp::VirtualArray_obj::__new(1)->init(0,HX_("camera",a5,46,8c,b7)),null());
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_507_new)
HXLINE( 507)				::flixel::tweens::FlxTween_obj::tween(::PlayState_obj::instance->camHUD, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("zoom",13,a3,f8,50),toZoom)),time, ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeIn_dyn())
            					->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_50(_gthis,onComplete)))));
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE( 506)			 cpp::Reference<lua_State> l47 = ::ModchartState_obj::lua;
HXDLIN( 506)			::llua::Lua_helper_obj::callbacks->set(HX_("tweenHudZoom",3f,b8,1c,a6), ::Dynamic(new _hx_Closure_51(_gthis)));
HXDLIN( 506)			linc::callbacks::add_callback_function(l47,HX_("tweenHudZoom",3f,b8,1c,a6));
            		}
HXLINE( 510)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_53, ::ModchartState,_gthis) HXARGC(5)
            			void _hx_run(::String id,int toX,int toY,Float time,::String onComplete){
            				HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_52,::String,id, ::ModchartState,_gthis,::String,onComplete) HXARGC(1)
            				void _hx_run( ::flixel::tweens::FlxTween flxTween){
            					HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_511_new)
HXLINE( 511)					bool _hx_tmp;
HXDLIN( 511)					if ((onComplete != HX_("",00,00,00,00))) {
HXLINE( 511)						_hx_tmp = ::hx::IsNotNull( onComplete );
            					}
            					else {
HXLINE( 511)						_hx_tmp = false;
            					}
HXDLIN( 511)					if (_hx_tmp) {
HXLINE( 511)						_gthis->callLua(onComplete,::cpp::VirtualArray_obj::__new(1)->init(0,id),null());
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_511_new)
HXLINE( 511)				 ::Dynamic _hx_tmp = _gthis->getActorByName(id);
HXDLIN( 511)				::flixel::tweens::FlxTween_obj::tween(_hx_tmp, ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("x",78,00,00,00),toX)
            					->setFixed(1,HX_("y",79,00,00,00),toY)),time, ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeIn_dyn())
            					->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_52(id,_gthis,onComplete)))));
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE( 510)			 cpp::Reference<lua_State> l48 = ::ModchartState_obj::lua;
HXDLIN( 510)			::llua::Lua_helper_obj::callbacks->set(HX_("tweenPos",e9,7f,cc,11), ::Dynamic(new _hx_Closure_53(_gthis)));
HXDLIN( 510)			linc::callbacks::add_callback_function(l48,HX_("tweenPos",e9,7f,cc,11));
            		}
HXLINE( 514)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_55, ::ModchartState,_gthis) HXARGC(5)
            			void _hx_run(::String id,int toX,Float toAngle,Float time,::String onComplete){
            				HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_54,::String,id, ::ModchartState,_gthis,::String,onComplete) HXARGC(1)
            				void _hx_run( ::flixel::tweens::FlxTween flxTween){
            					HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_515_new)
HXLINE( 515)					bool _hx_tmp;
HXDLIN( 515)					if ((onComplete != HX_("",00,00,00,00))) {
HXLINE( 515)						_hx_tmp = ::hx::IsNotNull( onComplete );
            					}
            					else {
HXLINE( 515)						_hx_tmp = false;
            					}
HXDLIN( 515)					if (_hx_tmp) {
HXLINE( 515)						_gthis->callLua(onComplete,::cpp::VirtualArray_obj::__new(1)->init(0,id),null());
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_515_new)
HXLINE( 515)				 ::Dynamic _hx_tmp = _gthis->getActorByName(id);
HXDLIN( 515)				::flixel::tweens::FlxTween_obj::tween(_hx_tmp, ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("x",78,00,00,00),toX)
            					->setFixed(1,HX_("angle",d3,43,e2,22),toAngle)),time, ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeIn_dyn())
            					->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_54(id,_gthis,onComplete)))));
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE( 514)			 cpp::Reference<lua_State> l49 = ::ModchartState_obj::lua;
HXDLIN( 514)			::llua::Lua_helper_obj::callbacks->set(HX_("tweenPosXAngle",04,49,36,57), ::Dynamic(new _hx_Closure_55(_gthis)));
HXDLIN( 514)			linc::callbacks::add_callback_function(l49,HX_("tweenPosXAngle",04,49,36,57));
            		}
HXLINE( 518)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_57, ::ModchartState,_gthis) HXARGC(5)
            			void _hx_run(::String id,int toY,Float toAngle,Float time,::String onComplete){
            				HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_56,::String,id, ::ModchartState,_gthis,::String,onComplete) HXARGC(1)
            				void _hx_run( ::flixel::tweens::FlxTween flxTween){
            					HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_519_new)
HXLINE( 519)					bool _hx_tmp;
HXDLIN( 519)					if ((onComplete != HX_("",00,00,00,00))) {
HXLINE( 519)						_hx_tmp = ::hx::IsNotNull( onComplete );
            					}
            					else {
HXLINE( 519)						_hx_tmp = false;
            					}
HXDLIN( 519)					if (_hx_tmp) {
HXLINE( 519)						_gthis->callLua(onComplete,::cpp::VirtualArray_obj::__new(1)->init(0,id),null());
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_519_new)
HXLINE( 519)				 ::Dynamic _hx_tmp = _gthis->getActorByName(id);
HXDLIN( 519)				::flixel::tweens::FlxTween_obj::tween(_hx_tmp, ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("y",79,00,00,00),toY)
            					->setFixed(1,HX_("angle",d3,43,e2,22),toAngle)),time, ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeIn_dyn())
            					->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_56(id,_gthis,onComplete)))));
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE( 518)			 cpp::Reference<lua_State> l50 = ::ModchartState_obj::lua;
HXDLIN( 518)			::llua::Lua_helper_obj::callbacks->set(HX_("tweenPosYAngle",63,a5,91,bd), ::Dynamic(new _hx_Closure_57(_gthis)));
HXDLIN( 518)			linc::callbacks::add_callback_function(l50,HX_("tweenPosYAngle",63,a5,91,bd));
            		}
HXLINE( 522)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_59, ::ModchartState,_gthis) HXARGC(4)
            			void _hx_run(::String id,int toAngle,Float time,::String onComplete){
            				HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_58,::String,id, ::ModchartState,_gthis,::String,onComplete) HXARGC(1)
            				void _hx_run( ::flixel::tweens::FlxTween flxTween){
            					HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_523_new)
HXLINE( 523)					bool _hx_tmp;
HXDLIN( 523)					if ((onComplete != HX_("",00,00,00,00))) {
HXLINE( 523)						_hx_tmp = ::hx::IsNotNull( onComplete );
            					}
            					else {
HXLINE( 523)						_hx_tmp = false;
            					}
HXDLIN( 523)					if (_hx_tmp) {
HXLINE( 523)						_gthis->callLua(onComplete,::cpp::VirtualArray_obj::__new(1)->init(0,id),null());
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_523_new)
HXLINE( 523)				 ::Dynamic _hx_tmp = _gthis->getActorByName(id);
HXDLIN( 523)				::flixel::tweens::FlxTween_obj::tween(_hx_tmp, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("angle",d3,43,e2,22),toAngle)),time, ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeIn_dyn())
            					->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_58(id,_gthis,onComplete)))));
            			}
            			HX_END_LOCAL_FUNC4((void))

HXLINE( 522)			 cpp::Reference<lua_State> l51 = ::ModchartState_obj::lua;
HXDLIN( 522)			::llua::Lua_helper_obj::callbacks->set(HX_("tweenAngle",68,65,26,da), ::Dynamic(new _hx_Closure_59(_gthis)));
HXDLIN( 522)			linc::callbacks::add_callback_function(l51,HX_("tweenAngle",68,65,26,da));
            		}
HXLINE( 526)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_61, ::ModchartState,_gthis) HXARGC(4)
            			void _hx_run(::String id,int toAlpha,Float time,::String onComplete){
            				HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_60,::String,id, ::ModchartState,_gthis,::String,onComplete) HXARGC(1)
            				void _hx_run( ::flixel::tweens::FlxTween flxTween){
            					HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_527_new)
HXLINE( 527)					bool _hx_tmp;
HXDLIN( 527)					if ((onComplete != HX_("",00,00,00,00))) {
HXLINE( 527)						_hx_tmp = ::hx::IsNotNull( onComplete );
            					}
            					else {
HXLINE( 527)						_hx_tmp = false;
            					}
HXDLIN( 527)					if (_hx_tmp) {
HXLINE( 527)						_gthis->callLua(onComplete,::cpp::VirtualArray_obj::__new(1)->init(0,id),null());
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_527_new)
HXLINE( 527)				 ::Dynamic _hx_tmp = _gthis->getActorByName(id);
HXDLIN( 527)				::flixel::tweens::FlxTween_obj::tween(_hx_tmp, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),toAlpha)),time, ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::circIn_dyn())
            					->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_60(id,_gthis,onComplete)))));
            			}
            			HX_END_LOCAL_FUNC4((void))

HXLINE( 526)			 cpp::Reference<lua_State> l52 = ::ModchartState_obj::lua;
HXDLIN( 526)			::llua::Lua_helper_obj::callbacks->set(HX_("tweenFadeIn",4c,8d,04,89), ::Dynamic(new _hx_Closure_61(_gthis)));
HXDLIN( 526)			linc::callbacks::add_callback_function(l52,HX_("tweenFadeIn",4c,8d,04,89));
            		}
HXLINE( 530)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_63, ::ModchartState,_gthis) HXARGC(4)
            			void _hx_run(::String id,int toAlpha,Float time,::String onComplete){
            				HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_62,::String,id, ::ModchartState,_gthis,::String,onComplete) HXARGC(1)
            				void _hx_run( ::flixel::tweens::FlxTween flxTween){
            					HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_531_new)
HXLINE( 531)					bool _hx_tmp;
HXDLIN( 531)					if ((onComplete != HX_("",00,00,00,00))) {
HXLINE( 531)						_hx_tmp = ::hx::IsNotNull( onComplete );
            					}
            					else {
HXLINE( 531)						_hx_tmp = false;
            					}
HXDLIN( 531)					if (_hx_tmp) {
HXLINE( 531)						_gthis->callLua(onComplete,::cpp::VirtualArray_obj::__new(1)->init(0,id),null());
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_531_new)
HXLINE( 531)				 ::Dynamic _hx_tmp = _gthis->getActorByName(id);
HXDLIN( 531)				::flixel::tweens::FlxTween_obj::tween(_hx_tmp, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),toAlpha)),time, ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::circOut_dyn())
            					->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_62(id,_gthis,onComplete)))));
            			}
            			HX_END_LOCAL_FUNC4((void))

HXLINE( 530)			 cpp::Reference<lua_State> l53 = ::ModchartState_obj::lua;
HXDLIN( 530)			::llua::Lua_helper_obj::callbacks->set(HX_("tweenFadeOut",47,a9,fb,5a), ::Dynamic(new _hx_Closure_63(_gthis)));
HXDLIN( 530)			linc::callbacks::add_callback_function(l53,HX_("tweenFadeOut",47,a9,fb,5a));
            		}
HXLINE( 581)		{
HXLINE( 581)			int _g = 0;
HXDLIN( 581)			int _g1 = ::PlayState_obj::strumLineNotes->length;
HXDLIN( 581)			while((_g < _g1)){
HXLINE( 581)				_g = (_g + 1);
HXDLIN( 581)				int i = (_g - 1);
HXLINE( 582)				 ::flixel::FlxSprite member = Dynamic( ::PlayState_obj::strumLineNotes->members->__get(i)).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 583)				::haxe::Log_obj::trace(((((((Dynamic( ::PlayState_obj::strumLineNotes->members->__get(i)).StaticCast<  ::flixel::FlxSprite >()->x + HX_(" ",20,00,00,00)) + Dynamic( ::PlayState_obj::strumLineNotes->members->__get(i)).StaticCast<  ::flixel::FlxSprite >()->y) + HX_(" ",20,00,00,00)) + Dynamic( ::PlayState_obj::strumLineNotes->members->__get(i)).StaticCast<  ::flixel::FlxSprite >()->angle) + HX_(" | strum",85,b2,37,9a)) + i),::hx::SourceInfo(HX_("source_brian/ModchartState.hx",36,d4,94,59),583,HX_("ModchartState",75,11,f2,8b),HX_("new",60,d0,53,00)));
HXLINE( 585)				this->setVar(((HX_("defaultStrum",c8,98,73,39) + i) + HX_("X",58,00,00,00)),::Math_obj::floor(member->x));
HXLINE( 587)				this->setVar(((HX_("defaultStrum",c8,98,73,39) + i) + HX_("Y",59,00,00,00)),::Math_obj::floor(member->y));
HXLINE( 589)				this->setVar(((HX_("defaultStrum",c8,98,73,39) + i) + HX_("Angle",b3,b3,0f,b6)),::Math_obj::floor(member->angle));
HXLINE( 590)				::haxe::Log_obj::trace((HX_("Adding strum",6a,59,eb,48) + i),::hx::SourceInfo(HX_("source_brian/ModchartState.hx",36,d4,94,59),590,HX_("ModchartState",75,11,f2,8b),HX_("new",60,d0,53,00)));
            			}
            		}
            	}

Dynamic ModchartState_obj::__CreateEmpty() { return new ModchartState_obj; }

void *ModchartState_obj::_hx_vtable = 0;

Dynamic ModchartState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ModchartState_obj > _hx_result = new ModchartState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ModchartState_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x683926b5;
}

 ::Dynamic ModchartState_obj::callLua(::String func_name,::cpp::VirtualArray args,::String type){
            	HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_27_callLua)
HXLINE(  28)		 ::Dynamic result = null();
HXLINE(  30)		lua_getglobal(::ModchartState_obj::lua,func_name);
HXLINE(  32)		{
HXLINE(  32)			int _g = 0;
HXDLIN(  32)			while((_g < args->get_length())){
HXLINE(  32)				 ::Dynamic arg = args->__get(_g);
HXDLIN(  32)				_g = (_g + 1);
HXLINE(  33)				::llua::Convert_obj::toLua(::ModchartState_obj::lua,arg);
            			}
            		}
HXLINE(  36)		result = lua_pcall(::ModchartState_obj::lua,args->get_length(),1,0);
HXLINE(  37)		::String p = linc::lua::tostring(::ModchartState_obj::lua,( (int)(result) ));
HXLINE(  38)		::String e = this->getLuaErrorMessage(::ModchartState_obj::lua);
HXLINE(  40)		if (::hx::IsNotNull( e )) {
HXLINE(  42)			if (::hx::IsNotNull( p )) {
HXLINE(  44)				::lime::app::Application_obj::current->_hx___window->alert((((HX_("LUA ERROR:\n",b0,01,3a,3a) + p) + HX_("\nhaxe things: ",9b,8f,de,e3)) + e),HX_("Kade Engine Modcharts",c2,0f,cb,ec));
HXLINE(  45)				::ModchartState_obj::lua = null();
HXLINE(  46)				{
HXLINE(  46)					 ::flixel::FlxState nextState = ::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::MainMenuState_obj::__alloc( HX_CTX ,null(),null())) ),false);
HXDLIN(  46)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  46)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
            			}
            		}
HXLINE(  50)		if (::hx::IsNull( result )) {
HXLINE(  51)			return null();
            		}
            		else {
HXLINE(  53)			return this->convert(result,type);
            		}
HXLINE(  50)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(ModchartState_obj,callLua,return )

 ::Dynamic ModchartState_obj::getType( cpp::Reference<lua_State> l,int type){
            	HX_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_60_getType)
HXDLIN(  60)		int _g = lua_type(l,type);
HXLINE(  61)		int t = _g;
HXDLIN(  61)		if ((t == 0)) {
HXLINE(  61)			return null();
            		}
            		else {
HXLINE(  62)			int t = _g;
HXDLIN(  62)			if ((t == 3)) {
HXLINE(  62)				return lua_tonumber(l,type);
            			}
            			else {
HXLINE(  63)				int t = _g;
HXDLIN(  63)				if ((t == 4)) {
HXLINE(  63)					return linc::lua::tostring(l,type);
            				}
            				else {
HXLINE(  64)					int t = _g;
HXDLIN(  64)					if ((t == 1)) {
HXLINE(  64)						return (lua_toboolean(l,type) != 0);
            					}
            					else {
HXLINE(  65)						int t = _g;
HXDLIN(  65)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(((HX_("you don goofed up. lua type error (",c3,6d,49,0b) + t) + HX_(")",29,00,00,00))));
            					}
            				}
            			}
            		}
HXLINE(  61)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(ModchartState_obj,getType,return )

 ::Dynamic ModchartState_obj::getReturnValues( cpp::Reference<lua_State> l){
            	HX_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_69_getReturnValues)
HXLINE(  70)		int lua_v;
HXLINE(  71)		 ::Dynamic v = null();
HXLINE(  72)		while(true){
HXLINE(  72)			lua_v = lua_gettop(l);
HXDLIN(  72)			if (!((lua_v != 0))) {
HXLINE(  72)				goto _hx_goto_69;
            			}
HXLINE(  73)			::String type = ( (::String)(this->getType(l,lua_v)) );
HXLINE(  74)			v = this->convert(lua_v,type);
HXLINE(  75)			lua_pop(l,1);
            		}
            		_hx_goto_69:;
HXLINE(  77)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ModchartState_obj,getReturnValues,return )

 ::Dynamic ModchartState_obj::convert( ::Dynamic v,::String type){
            	HX_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_82_convert)
HXDLIN(  82)		bool _hx_tmp;
HXDLIN(  82)		if (::Std_obj::isOfType(v,( ( ::Dynamic)(::hx::ClassOf< ::String >()) ))) {
HXDLIN(  82)			_hx_tmp = ::hx::IsNotNull( type );
            		}
            		else {
HXDLIN(  82)			_hx_tmp = false;
            		}
HXDLIN(  82)		if (_hx_tmp) {
HXLINE(  83)			::String v1 = ( (::String)(v) );
HXLINE(  84)			if ((type.substr(0,4) == HX_("array",99,6d,8f,25))) {
HXLINE(  85)				if ((type.substr(4,null()) == HX_("float",9c,c5,96,02))) {
HXLINE(  86)					::Array< ::String > array = v1.split(HX_(",",2c,00,00,00));
HXLINE(  87)					::Array< Float > array2 = ::Array_obj< Float >::__new();
HXLINE(  89)					{
HXLINE(  89)						int _g = 0;
HXDLIN(  89)						while((_g < array->length)){
HXLINE(  89)							::String vars = array->__get(_g);
HXDLIN(  89)							_g = (_g + 1);
HXLINE(  90)							array2->push(::Std_obj::parseFloat(vars));
            						}
            					}
HXLINE(  93)					return array2;
            				}
            				else {
HXLINE(  94)					if ((type.substr(4,null()) == HX_("int",ef,0c,50,00))) {
HXLINE(  95)						::Array< ::String > array = v1.split(HX_(",",2c,00,00,00));
HXLINE(  96)						::Array< int > array2 = ::Array_obj< int >::__new();
HXLINE(  98)						{
HXLINE(  98)							int _g = 0;
HXDLIN(  98)							while((_g < array->length)){
HXLINE(  98)								::String vars = array->__get(_g);
HXDLIN(  98)								_g = (_g + 1);
HXLINE(  99)								array2->push(::Std_obj::parseInt(vars));
            							}
            						}
HXLINE( 102)						return array2;
            					}
            					else {
HXLINE( 104)						::Array< ::String > array = v1.split(HX_(",",2c,00,00,00));
HXLINE( 105)						return array;
            					}
            				}
            			}
            			else {
HXLINE( 107)				if ((type == HX_("float",9c,c5,96,02))) {
HXLINE( 108)					return ::Std_obj::parseFloat(v1);
            				}
            				else {
HXLINE( 109)					if ((type == HX_("int",ef,0c,50,00))) {
HXLINE( 110)						return ::Std_obj::parseInt(v1);
            					}
            					else {
HXLINE( 111)						if ((type == HX_("bool",2a,84,1b,41))) {
HXLINE( 112)							if ((v1 == HX_("true",4e,a7,03,4d))) {
HXLINE( 113)								return true;
            							}
            							else {
HXLINE( 115)								return false;
            							}
            						}
            						else {
HXLINE( 118)							return v1;
            						}
            					}
            				}
            			}
            		}
            		else {
HXLINE( 121)			return v;
            		}
HXLINE(  82)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(ModchartState_obj,convert,return )

::String ModchartState_obj::getLuaErrorMessage( cpp::Reference<lua_State> l){
            	HX_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_125_getLuaErrorMessage)
HXLINE( 126)		::String v = linc::lua::tostring(l,-1);
HXLINE( 127)		lua_pop(l,1);
HXLINE( 128)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ModchartState_obj,getLuaErrorMessage,return )

void ModchartState_obj::setVar(::String var_name, ::Dynamic object){
            	HX_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_131_setVar)
HXLINE( 134)		lua_pushnumber(::ModchartState_obj::lua,( (Float)(object) ));
HXLINE( 135)		lua_setglobal(::ModchartState_obj::lua,var_name);
            	}


HX_DEFINE_DYNAMIC_FUNC2(ModchartState_obj,setVar,(void))

 ::Dynamic ModchartState_obj::getVar(::String var_name,::String type){
            	HX_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_138_getVar)
HXLINE( 139)		 ::Dynamic result = null();
HXLINE( 143)		lua_getglobal(::ModchartState_obj::lua,var_name);
HXLINE( 144)		 cpp::Reference<lua_State> l = ::ModchartState_obj::lua;
HXDLIN( 144)		 ::Dynamic ret = null();
HXDLIN( 144)		switch((int)(lua_type(l,-1))){
            			case (int)0: {
HXLINE( 144)				ret = null();
            			}
            			break;
            			case (int)1: {
HXLINE( 144)				ret = (lua_toboolean(l,-1) != 0);
            			}
            			break;
            			case (int)3: {
HXLINE( 144)				ret = lua_tonumber(l,-1);
            			}
            			break;
            			case (int)4: {
HXLINE( 144)				ret = linc::lua::tostring(l,-1);
            			}
            			break;
            			case (int)5: {
HXLINE( 144)				bool array = true;
HXDLIN( 144)				 ::Dynamic ret1 = null();
HXDLIN( 144)				lua_pushnil(l);
HXDLIN( 144)				while((lua_next(l,-2) != 0)){
HXLINE( 144)					if ((lua_type(l,-2) != 3)) {
HXLINE( 144)						array = false;
HXDLIN( 144)						lua_pop(l,2);
HXDLIN( 144)						goto _hx_goto_76;
            					}
HXDLIN( 144)					Float n = lua_tonumber(l,-2);
HXDLIN( 144)					if ((n != ::Std_obj::_hx_int(n))) {
HXLINE( 144)						array = false;
HXDLIN( 144)						lua_pop(l,2);
HXDLIN( 144)						goto _hx_goto_76;
            					}
HXDLIN( 144)					lua_pop(l,1);
            				}
            				_hx_goto_76:;
HXDLIN( 144)				if (array) {
HXLINE( 144)					::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 144)					lua_pushnil(l);
HXDLIN( 144)					while((lua_next(l,-2) != 0)){
HXLINE( 144)						int index = (lua_tointeger(l,-2) - 1);
HXDLIN( 144)						 ::Dynamic ret = null();
HXDLIN( 144)						switch((int)(lua_type(l,-1))){
            							case (int)0: {
HXLINE( 144)								ret = null();
            							}
            							break;
            							case (int)1: {
HXLINE( 144)								ret = (lua_toboolean(l,-1) != 0);
            							}
            							break;
            							case (int)3: {
HXLINE( 144)								ret = lua_tonumber(l,-1);
            							}
            							break;
            							case (int)4: {
HXLINE( 144)								ret = linc::lua::tostring(l,-1);
            							}
            							break;
            							case (int)5: {
HXLINE( 144)								bool array = true;
HXDLIN( 144)								 ::Dynamic ret1 = null();
HXDLIN( 144)								lua_pushnil(l);
HXDLIN( 144)								while((lua_next(l,-2) != 0)){
HXLINE( 144)									if ((lua_type(l,-2) != 3)) {
HXLINE( 144)										array = false;
HXDLIN( 144)										lua_pop(l,2);
HXDLIN( 144)										goto _hx_goto_78;
            									}
HXDLIN( 144)									Float n = lua_tonumber(l,-2);
HXDLIN( 144)									if ((n != ::Std_obj::_hx_int(n))) {
HXLINE( 144)										array = false;
HXDLIN( 144)										lua_pop(l,2);
HXDLIN( 144)										goto _hx_goto_78;
            									}
HXDLIN( 144)									lua_pop(l,1);
            								}
            								_hx_goto_78:;
HXDLIN( 144)								if (array) {
HXLINE( 144)									::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 144)									lua_pushnil(l);
HXDLIN( 144)									while((lua_next(l,-2) != 0)){
HXLINE( 144)										int index = (lua_tointeger(l,-2) - 1);
HXDLIN( 144)										arr->set(index,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 144)										lua_pop(l,1);
            									}
HXDLIN( 144)									ret1 = arr;
            								}
            								else {
HXLINE( 144)									 hx::Anon obj = hx::Anon_obj::Create();
HXDLIN( 144)									lua_pushnil(l);
HXDLIN( 144)									while((lua_next(l,-2) != 0)){
HXLINE( 144)										::String ret = ::Std_obj::string(::llua::Convert_obj::fromLua(l,-2));
HXDLIN( 144)										obj->hx::Anon_obj::Add(ret,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 144)										lua_pop(l,1);
            									}
HXDLIN( 144)									ret1 = obj;
            								}
HXDLIN( 144)								ret = ret1;
            							}
            							break;
            							default:{
HXLINE( 144)								ret = null();
HXDLIN( 144)								::haxe::Log_obj::trace(HX_("return value not supported\n",48,41,fb,c8),::hx::SourceInfo(HX_("llua/Convert.hx",6e,6a,e3,49),97,HX_("llua.Convert",31,b8,44,19),HX_("fromLua",6e,2a,fd,57)));
            							}
            						}
HXDLIN( 144)						arr->set(index,ret);
HXDLIN( 144)						lua_pop(l,1);
            					}
HXDLIN( 144)					ret1 = arr;
            				}
            				else {
HXLINE( 144)					 hx::Anon obj = hx::Anon_obj::Create();
HXDLIN( 144)					lua_pushnil(l);
HXDLIN( 144)					while((lua_next(l,-2) != 0)){
HXLINE( 144)						 ::Dynamic ret = null();
HXDLIN( 144)						switch((int)(lua_type(l,-2))){
            							case (int)0: {
HXLINE( 144)								ret = null();
            							}
            							break;
            							case (int)1: {
HXLINE( 144)								ret = (lua_toboolean(l,-2) != 0);
            							}
            							break;
            							case (int)3: {
HXLINE( 144)								ret = lua_tonumber(l,-2);
            							}
            							break;
            							case (int)4: {
HXLINE( 144)								ret = linc::lua::tostring(l,-2);
            							}
            							break;
            							case (int)5: {
HXLINE( 144)								bool array = true;
HXDLIN( 144)								 ::Dynamic ret1 = null();
HXDLIN( 144)								lua_pushnil(l);
HXDLIN( 144)								while((lua_next(l,-2) != 0)){
HXLINE( 144)									if ((lua_type(l,-2) != 3)) {
HXLINE( 144)										array = false;
HXDLIN( 144)										lua_pop(l,2);
HXDLIN( 144)										goto _hx_goto_82;
            									}
HXDLIN( 144)									Float n = lua_tonumber(l,-2);
HXDLIN( 144)									if ((n != ::Std_obj::_hx_int(n))) {
HXLINE( 144)										array = false;
HXDLIN( 144)										lua_pop(l,2);
HXDLIN( 144)										goto _hx_goto_82;
            									}
HXDLIN( 144)									lua_pop(l,1);
            								}
            								_hx_goto_82:;
HXDLIN( 144)								if (array) {
HXLINE( 144)									::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 144)									lua_pushnil(l);
HXDLIN( 144)									while((lua_next(l,-2) != 0)){
HXLINE( 144)										int index = (lua_tointeger(l,-2) - 1);
HXDLIN( 144)										 ::Dynamic ret = null();
HXDLIN( 144)										switch((int)(lua_type(l,-1))){
            											case (int)0: {
HXLINE( 144)												ret = null();
            											}
            											break;
            											case (int)1: {
HXLINE( 144)												ret = (lua_toboolean(l,-1) != 0);
            											}
            											break;
            											case (int)3: {
HXLINE( 144)												ret = lua_tonumber(l,-1);
            											}
            											break;
            											case (int)4: {
HXLINE( 144)												ret = linc::lua::tostring(l,-1);
            											}
            											break;
            											case (int)5: {
HXLINE( 144)												bool array = true;
HXDLIN( 144)												 ::Dynamic ret1 = null();
HXDLIN( 144)												lua_pushnil(l);
HXDLIN( 144)												while((lua_next(l,-2) != 0)){
HXLINE( 144)													if ((lua_type(l,-2) != 3)) {
HXLINE( 144)														array = false;
HXDLIN( 144)														lua_pop(l,2);
HXDLIN( 144)														goto _hx_goto_84;
            													}
HXDLIN( 144)													Float n = lua_tonumber(l,-2);
HXDLIN( 144)													if ((n != ::Std_obj::_hx_int(n))) {
HXLINE( 144)														array = false;
HXDLIN( 144)														lua_pop(l,2);
HXDLIN( 144)														goto _hx_goto_84;
            													}
HXDLIN( 144)													lua_pop(l,1);
            												}
            												_hx_goto_84:;
HXDLIN( 144)												if (array) {
HXLINE( 144)													::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 144)													lua_pushnil(l);
HXDLIN( 144)													while((lua_next(l,-2) != 0)){
HXLINE( 144)														int index = (lua_tointeger(l,-2) - 1);
HXDLIN( 144)														arr->set(index,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 144)														lua_pop(l,1);
            													}
HXDLIN( 144)													ret1 = arr;
            												}
            												else {
HXLINE( 144)													 hx::Anon obj = hx::Anon_obj::Create();
HXDLIN( 144)													lua_pushnil(l);
HXDLIN( 144)													while((lua_next(l,-2) != 0)){
HXLINE( 144)														::String ret = ::Std_obj::string(::llua::Convert_obj::fromLua(l,-2));
HXDLIN( 144)														obj->hx::Anon_obj::Add(ret,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 144)														lua_pop(l,1);
            													}
HXDLIN( 144)													ret1 = obj;
            												}
HXDLIN( 144)												ret = ret1;
            											}
            											break;
            											default:{
HXLINE( 144)												ret = null();
HXDLIN( 144)												::haxe::Log_obj::trace(HX_("return value not supported\n",48,41,fb,c8),::hx::SourceInfo(HX_("llua/Convert.hx",6e,6a,e3,49),97,HX_("llua.Convert",31,b8,44,19),HX_("fromLua",6e,2a,fd,57)));
            											}
            										}
HXDLIN( 144)										arr->set(index,ret);
HXDLIN( 144)										lua_pop(l,1);
            									}
HXDLIN( 144)									ret1 = arr;
            								}
            								else {
HXLINE( 144)									 hx::Anon obj = hx::Anon_obj::Create();
HXDLIN( 144)									lua_pushnil(l);
HXDLIN( 144)									while((lua_next(l,-2) != 0)){
HXLINE( 144)										 ::Dynamic ret = null();
HXDLIN( 144)										switch((int)(lua_type(l,-2))){
            											case (int)0: {
HXLINE( 144)												ret = null();
            											}
            											break;
            											case (int)1: {
HXLINE( 144)												ret = (lua_toboolean(l,-2) != 0);
            											}
            											break;
            											case (int)3: {
HXLINE( 144)												ret = lua_tonumber(l,-2);
            											}
            											break;
            											case (int)4: {
HXLINE( 144)												ret = linc::lua::tostring(l,-2);
            											}
            											break;
            											case (int)5: {
HXLINE( 144)												bool array = true;
HXDLIN( 144)												 ::Dynamic ret1 = null();
HXDLIN( 144)												lua_pushnil(l);
HXDLIN( 144)												while((lua_next(l,-2) != 0)){
HXLINE( 144)													if ((lua_type(l,-2) != 3)) {
HXLINE( 144)														array = false;
HXDLIN( 144)														lua_pop(l,2);
HXDLIN( 144)														goto _hx_goto_88;
            													}
HXDLIN( 144)													Float n = lua_tonumber(l,-2);
HXDLIN( 144)													if ((n != ::Std_obj::_hx_int(n))) {
HXLINE( 144)														array = false;
HXDLIN( 144)														lua_pop(l,2);
HXDLIN( 144)														goto _hx_goto_88;
            													}
HXDLIN( 144)													lua_pop(l,1);
            												}
            												_hx_goto_88:;
HXDLIN( 144)												if (array) {
HXLINE( 144)													::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 144)													lua_pushnil(l);
HXDLIN( 144)													while((lua_next(l,-2) != 0)){
HXLINE( 144)														int index = (lua_tointeger(l,-2) - 1);
HXDLIN( 144)														arr->set(index,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 144)														lua_pop(l,1);
            													}
HXDLIN( 144)													ret1 = arr;
            												}
            												else {
HXLINE( 144)													 hx::Anon obj = hx::Anon_obj::Create();
HXDLIN( 144)													lua_pushnil(l);
HXDLIN( 144)													while((lua_next(l,-2) != 0)){
HXLINE( 144)														::String ret = ::Std_obj::string(::llua::Convert_obj::fromLua(l,-2));
HXDLIN( 144)														obj->hx::Anon_obj::Add(ret,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 144)														lua_pop(l,1);
            													}
HXDLIN( 144)													ret1 = obj;
            												}
HXDLIN( 144)												ret = ret1;
            											}
            											break;
            											default:{
HXLINE( 144)												ret = null();
HXDLIN( 144)												::haxe::Log_obj::trace(HX_("return value not supported\n",48,41,fb,c8),::hx::SourceInfo(HX_("llua/Convert.hx",6e,6a,e3,49),97,HX_("llua.Convert",31,b8,44,19),HX_("fromLua",6e,2a,fd,57)));
            											}
            										}
HXDLIN( 144)										::String ret1 = ::Std_obj::string(ret);
HXDLIN( 144)										 ::Dynamic ret2 = null();
HXDLIN( 144)										switch((int)(lua_type(l,-1))){
            											case (int)0: {
HXLINE( 144)												ret2 = null();
            											}
            											break;
            											case (int)1: {
HXLINE( 144)												ret2 = (lua_toboolean(l,-1) != 0);
            											}
            											break;
            											case (int)3: {
HXLINE( 144)												ret2 = lua_tonumber(l,-1);
            											}
            											break;
            											case (int)4: {
HXLINE( 144)												ret2 = linc::lua::tostring(l,-1);
            											}
            											break;
            											case (int)5: {
HXLINE( 144)												bool array = true;
HXDLIN( 144)												 ::Dynamic ret = null();
HXDLIN( 144)												lua_pushnil(l);
HXDLIN( 144)												while((lua_next(l,-2) != 0)){
HXLINE( 144)													if ((lua_type(l,-2) != 3)) {
HXLINE( 144)														array = false;
HXDLIN( 144)														lua_pop(l,2);
HXDLIN( 144)														goto _hx_goto_91;
            													}
HXDLIN( 144)													Float n = lua_tonumber(l,-2);
HXDLIN( 144)													if ((n != ::Std_obj::_hx_int(n))) {
HXLINE( 144)														array = false;
HXDLIN( 144)														lua_pop(l,2);
HXDLIN( 144)														goto _hx_goto_91;
            													}
HXDLIN( 144)													lua_pop(l,1);
            												}
            												_hx_goto_91:;
HXDLIN( 144)												if (array) {
HXLINE( 144)													::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 144)													lua_pushnil(l);
HXDLIN( 144)													while((lua_next(l,-2) != 0)){
HXLINE( 144)														int index = (lua_tointeger(l,-2) - 1);
HXDLIN( 144)														arr->set(index,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 144)														lua_pop(l,1);
            													}
HXDLIN( 144)													ret = arr;
            												}
            												else {
HXLINE( 144)													 hx::Anon obj = hx::Anon_obj::Create();
HXDLIN( 144)													lua_pushnil(l);
HXDLIN( 144)													while((lua_next(l,-2) != 0)){
HXLINE( 144)														::String ret = ::Std_obj::string(::llua::Convert_obj::fromLua(l,-2));
HXDLIN( 144)														obj->hx::Anon_obj::Add(ret,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 144)														lua_pop(l,1);
            													}
HXDLIN( 144)													ret = obj;
            												}
HXDLIN( 144)												ret2 = ret;
            											}
            											break;
            											default:{
HXLINE( 144)												ret2 = null();
HXDLIN( 144)												::haxe::Log_obj::trace(HX_("return value not supported\n",48,41,fb,c8),::hx::SourceInfo(HX_("llua/Convert.hx",6e,6a,e3,49),97,HX_("llua.Convert",31,b8,44,19),HX_("fromLua",6e,2a,fd,57)));
            											}
            										}
HXDLIN( 144)										obj->hx::Anon_obj::Add(ret1,ret2);
HXDLIN( 144)										lua_pop(l,1);
            									}
HXDLIN( 144)									ret1 = obj;
            								}
HXDLIN( 144)								ret = ret1;
            							}
            							break;
            							default:{
HXLINE( 144)								ret = null();
HXDLIN( 144)								::haxe::Log_obj::trace(HX_("return value not supported\n",48,41,fb,c8),::hx::SourceInfo(HX_("llua/Convert.hx",6e,6a,e3,49),97,HX_("llua.Convert",31,b8,44,19),HX_("fromLua",6e,2a,fd,57)));
            							}
            						}
HXDLIN( 144)						::String ret1 = ::Std_obj::string(ret);
HXDLIN( 144)						 ::Dynamic ret2 = null();
HXDLIN( 144)						switch((int)(lua_type(l,-1))){
            							case (int)0: {
HXLINE( 144)								ret2 = null();
            							}
            							break;
            							case (int)1: {
HXLINE( 144)								ret2 = (lua_toboolean(l,-1) != 0);
            							}
            							break;
            							case (int)3: {
HXLINE( 144)								ret2 = lua_tonumber(l,-1);
            							}
            							break;
            							case (int)4: {
HXLINE( 144)								ret2 = linc::lua::tostring(l,-1);
            							}
            							break;
            							case (int)5: {
HXLINE( 144)								bool array = true;
HXDLIN( 144)								 ::Dynamic ret = null();
HXDLIN( 144)								lua_pushnil(l);
HXDLIN( 144)								while((lua_next(l,-2) != 0)){
HXLINE( 144)									if ((lua_type(l,-2) != 3)) {
HXLINE( 144)										array = false;
HXDLIN( 144)										lua_pop(l,2);
HXDLIN( 144)										goto _hx_goto_94;
            									}
HXDLIN( 144)									Float n = lua_tonumber(l,-2);
HXDLIN( 144)									if ((n != ::Std_obj::_hx_int(n))) {
HXLINE( 144)										array = false;
HXDLIN( 144)										lua_pop(l,2);
HXDLIN( 144)										goto _hx_goto_94;
            									}
HXDLIN( 144)									lua_pop(l,1);
            								}
            								_hx_goto_94:;
HXDLIN( 144)								if (array) {
HXLINE( 144)									::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 144)									lua_pushnil(l);
HXDLIN( 144)									while((lua_next(l,-2) != 0)){
HXLINE( 144)										int index = (lua_tointeger(l,-2) - 1);
HXDLIN( 144)										arr->set(index,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 144)										lua_pop(l,1);
            									}
HXDLIN( 144)									ret = arr;
            								}
            								else {
HXLINE( 144)									 hx::Anon obj = hx::Anon_obj::Create();
HXDLIN( 144)									lua_pushnil(l);
HXDLIN( 144)									while((lua_next(l,-2) != 0)){
HXLINE( 144)										::String ret = ::Std_obj::string(::llua::Convert_obj::fromLua(l,-2));
HXDLIN( 144)										obj->hx::Anon_obj::Add(ret,::llua::Convert_obj::fromLua(l,-1));
HXDLIN( 144)										lua_pop(l,1);
            									}
HXDLIN( 144)									ret = obj;
            								}
HXDLIN( 144)								ret2 = ret;
            							}
            							break;
            							default:{
HXLINE( 144)								ret2 = null();
HXDLIN( 144)								::haxe::Log_obj::trace(HX_("return value not supported\n",48,41,fb,c8),::hx::SourceInfo(HX_("llua/Convert.hx",6e,6a,e3,49),97,HX_("llua.Convert",31,b8,44,19),HX_("fromLua",6e,2a,fd,57)));
            							}
            						}
HXDLIN( 144)						obj->hx::Anon_obj::Add(ret1,ret2);
HXDLIN( 144)						lua_pop(l,1);
            					}
HXDLIN( 144)					ret1 = obj;
            				}
HXDLIN( 144)				ret = ret1;
            			}
            			break;
            			default:{
HXLINE( 144)				ret = null();
HXDLIN( 144)				::haxe::Log_obj::trace(HX_("return value not supported\n",48,41,fb,c8),::hx::SourceInfo(HX_("llua/Convert.hx",6e,6a,e3,49),97,HX_("llua.Convert",31,b8,44,19),HX_("fromLua",6e,2a,fd,57)));
            			}
            		}
HXDLIN( 144)		result = ret;
HXLINE( 145)		lua_pop(::ModchartState_obj::lua,1);
HXLINE( 147)		if (::hx::IsNull( result )) {
HXLINE( 148)			return null();
            		}
            		else {
HXLINE( 150)			 ::Dynamic result1 = this->convert(result,type);
HXLINE( 152)			return result1;
            		}
HXLINE( 147)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(ModchartState_obj,getVar,return )

 ::Dynamic ModchartState_obj::getActorByName(::String id){
            	HX_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_157_getActorByName)
HXLINE( 159)		::String _hx_switch_0 = id;
            		if (  (_hx_switch_0==HX_("boyfriend",6a,29,b8,e6)) ){
HXLINE( 163)			return ::PlayState_obj::boyfriend;
HXDLIN( 163)			goto _hx_goto_98;
            		}
            		if (  (_hx_switch_0==HX_("dad",47,36,4c,00)) ){
HXLINE( 169)			return ::PlayState_obj::dad;
HXDLIN( 169)			goto _hx_goto_98;
            		}
            		if (  (_hx_switch_0==HX_("girlfriend",ba,91,48,98)) ){
HXLINE( 166)			return ::PlayState_obj::gf;
HXDLIN( 166)			goto _hx_goto_98;
            		}
            		_hx_goto_98:;
HXLINE( 172)		if (::hx::IsNull( ::ModchartState_obj::luaSprites->get(id) )) {
HXLINE( 173)			return Dynamic( ::PlayState_obj::strumLineNotes->members->__get(( (int)(::Std_obj::parseInt(id)) ))).StaticCast<  ::flixel::FlxSprite >();
            		}
HXLINE( 174)		return ::ModchartState_obj::luaSprites->get(id);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ModchartState_obj,getActorByName,return )

::String ModchartState_obj::makeLuaSprite(::String spritePath,::String toBeCalled,bool drawBehind){
            	HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_182_makeLuaSprite)
HXLINE( 184)		::String data = (::Sys_obj::getCwd() + HX_("assets/data/",f9,10,73,a0));
HXDLIN( 184)		 ::openfl::display::BitmapData data1 = ::openfl::display::BitmapData_obj::fromFile(((((data + ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase()) + HX_("/",2f,00,00,00)) + spritePath) + HX_(".png",3b,2d,bd,1e)));
HXLINE( 186)		 ::flixel::FlxSprite sprite =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXLINE( 187)		Float imgWidth = (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(data1->width) ));
HXLINE( 188)		Float imgHeight = (( (Float)(::flixel::FlxG_obj::height) ) / ( (Float)(data1->height) ));
HXLINE( 189)		Float scale;
HXDLIN( 189)		if ((imgWidth <= imgHeight)) {
HXLINE( 189)			scale = imgWidth;
            		}
            		else {
HXLINE( 189)			scale = imgHeight;
            		}
HXLINE( 192)		if ((scale > 1)) {
HXLINE( 194)			scale = ( (Float)(1) );
            		}
HXLINE( 197)		int _hx_tmp = ::Std_obj::_hx_int((( (Float)(data1->width) ) * scale));
HXDLIN( 197)		sprite->makeGraphic(_hx_tmp,::Std_obj::_hx_int((( (Float)(data1->width) ) * scale)),0,null(),null());
HXLINE( 199)		 ::openfl::display::BitmapData data2 = sprite->get_pixels()->clone();
HXLINE( 200)		 ::openfl::geom::Matrix matrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 201)		matrix->identity();
HXLINE( 202)		matrix->scale(scale,scale);
HXLINE( 203)		data2->fillRect(data2->rect,0);
HXLINE( 204)		data2->draw(data1,matrix,null(),null(),null(),true);
HXLINE( 205)		sprite->set_pixels(data2);
HXLINE( 207)		::ModchartState_obj::luaSprites->set(toBeCalled,sprite);
HXLINE( 211)		{
HXLINE( 212)			if (drawBehind) {
HXLINE( 214)				::PlayState_obj::instance->removeObject(::PlayState_obj::gf);
HXLINE( 215)				::PlayState_obj::instance->removeObject(::PlayState_obj::boyfriend);
HXLINE( 216)				::PlayState_obj::instance->removeObject(::PlayState_obj::dad);
            			}
HXLINE( 218)			::PlayState_obj::instance->addObject(sprite);
HXLINE( 219)			if (drawBehind) {
HXLINE( 221)				::PlayState_obj::instance->addObject(::PlayState_obj::gf);
HXLINE( 222)				::PlayState_obj::instance->addObject(::PlayState_obj::boyfriend);
HXLINE( 223)				::PlayState_obj::instance->addObject(::PlayState_obj::dad);
            			}
            		}
HXLINE( 227)		return toBeCalled;
            	}


HX_DEFINE_DYNAMIC_FUNC3(ModchartState_obj,makeLuaSprite,return )

void ModchartState_obj::die(){
            	HX_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_231_die)
HXLINE( 232)		lua_close(::ModchartState_obj::lua);
HXLINE( 233)		::ModchartState_obj::lua = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ModchartState_obj,die,(void))

::String ModchartState_obj::executeState(::String name,::cpp::VirtualArray args){
            	HX_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_596_executeState)
HXDLIN( 596)		 cpp::Reference<lua_State> _hx_tmp = ::ModchartState_obj::lua;
HXDLIN( 596)		return linc::lua::tostring(_hx_tmp,( (int)(this->callLua(name,args,null())) ));
            	}


HX_DEFINE_DYNAMIC_FUNC2(ModchartState_obj,executeState,return )

 cpp::Reference<lua_State> ModchartState_obj::lua;

 ::haxe::ds::StringMap ModchartState_obj::luaSprites;

 ::ModchartState ModchartState_obj::createModchartState(){
            	HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_601_createModchartState)
HXDLIN( 601)		return  ::ModchartState_obj::__alloc( HX_CTX );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ModchartState_obj,createModchartState,return )


::hx::ObjectPtr< ModchartState_obj > ModchartState_obj::__new() {
	::hx::ObjectPtr< ModchartState_obj > __this = new ModchartState_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< ModchartState_obj > ModchartState_obj::__alloc(::hx::Ctx *_hx_ctx) {
	ModchartState_obj *__this = (ModchartState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ModchartState_obj), false, "ModchartState"));
	*(void **)__this = ModchartState_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ModchartState_obj::ModchartState_obj()
{
}

::hx::Val ModchartState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"die") ) { return ::hx::Val( die_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"setVar") ) { return ::hx::Val( setVar_dyn() ); }
		if (HX_FIELD_EQ(inName,"getVar") ) { return ::hx::Val( getVar_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"callLua") ) { return ::hx::Val( callLua_dyn() ); }
		if (HX_FIELD_EQ(inName,"getType") ) { return ::hx::Val( getType_dyn() ); }
		if (HX_FIELD_EQ(inName,"convert") ) { return ::hx::Val( convert_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"executeState") ) { return ::hx::Val( executeState_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"makeLuaSprite") ) { return ::hx::Val( makeLuaSprite_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getActorByName") ) { return ::hx::Val( getActorByName_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getReturnValues") ) { return ::hx::Val( getReturnValues_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getLuaErrorMessage") ) { return ::hx::Val( getLuaErrorMessage_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ModchartState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"lua") ) { outValue = ( lua ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"luaSprites") ) { outValue = ( luaSprites ); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"createModchartState") ) { outValue = createModchartState_dyn(); return true; }
	}
	return false;
}

bool ModchartState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"lua") ) { lua=ioValue.Cast<  cpp::Reference<lua_State> >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"luaSprites") ) { luaSprites=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *ModchartState_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo ModchartState_obj_sStaticStorageInfo[] = {
	{::hx::fsUnknown /*  cpp::Reference<lua_State> */ ,(void *) &ModchartState_obj::lua,HX_("lua",b8,59,52,00)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &ModchartState_obj::luaSprites,HX_("luaSprites",f6,9d,b8,60)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String ModchartState_obj_sMemberFields[] = {
	HX_("callLua",ba,af,4e,54),
	HX_("getType",70,a2,8b,1f),
	HX_("getReturnValues",68,16,f8,a6),
	HX_("convert",f3,fd,c9,1a),
	HX_("getLuaErrorMessage",c1,14,67,07),
	HX_("setVar",65,6c,71,6f),
	HX_("getVar",f1,17,29,a3),
	HX_("getActorByName",a1,e3,65,e2),
	HX_("makeLuaSprite",0f,bc,5b,d4),
	HX_("die",40,3d,4c,00),
	HX_("executeState",9c,bb,91,3e),
	::String(null()) };

static void ModchartState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ModchartState_obj::lua,"lua");
	HX_MARK_MEMBER_NAME(ModchartState_obj::luaSprites,"luaSprites");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ModchartState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ModchartState_obj::lua,"lua");
	HX_VISIT_MEMBER_NAME(ModchartState_obj::luaSprites,"luaSprites");
};

#endif

::hx::Class ModchartState_obj::__mClass;

static ::String ModchartState_obj_sStaticFields[] = {
	HX_("lua",b8,59,52,00),
	HX_("luaSprites",f6,9d,b8,60),
	HX_("createModchartState",f9,fc,58,24),
	::String(null())
};

void ModchartState_obj::__register()
{
	ModchartState_obj _hx_dummy;
	ModchartState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ModchartState",75,11,f2,8b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ModchartState_obj::__GetStatic;
	__mClass->mSetStaticField = &ModchartState_obj::__SetStatic;
	__mClass->mMarkFunc = ModchartState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ModchartState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ModchartState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ModchartState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ModchartState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ModchartState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ModchartState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ModchartState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_24_boot)
HXDLIN(  24)		lua = null();
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_177_boot)
HXDLIN( 177)		luaSprites =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
}

